
R version 3.0.0 (2013-04-03) -- "Masked Marvel"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "Rgbp"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('Rgbp')
Loading required package: sn
Loading required package: mnormt
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Rgbp-package")
> ### * Rgbp-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Rgbp
> ### Title: Bayesian Hierarchical Modeling and Frequentist Method Check
> ### Aliases: Rgbp-package Rgbp
> ### Keywords: package
> 
> ### ** Examples
> 
> 
> 
>   # Loading datasets
>   data(schools)
>   y <- schools$y
>   se <- schools$se
> 
>   # Arbitrary covariate for schools data
>   x2 <- rep(c(-1, 0, 1, 2), 2)
>   
>   # baseball data where z is Hits and n is AtBats
>   z <- c(18, 17, 16, 15, 14, 14, 13, 12, 11, 11, 10, 10, 10, 10, 10,  9,  8,  7)
>   n <- c(45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45)
> 
>   # One covariate: 1 if a player is an outfielder and 0 otherwise
>   x1 <- c(1,  1,  1,  1,  1,  0,  0,  0,  0,  1,  0,  0,  0,  1,  1,  0,  0,  0)
> 
>   ################################################################
>   # Gaussian Regression Interactive Multilevel Modeling (GRIMM) #
>   ################################################################
> 
>     ####################################################################################
>     # If we do not have any covariate and do not know a mean of the prior distribution #
>     ####################################################################################
> 
>     g <- gbp(y, se)
>     g
Summary for each unit (sorted by se): 

         obs.mean   se prior.mean shrinkage low.intv post.mean upp.intv post.sd
5           -1.00  9.0      8.168     0.408  -13.297     2.737   16.692   7.634
2            8.00 10.0      8.168     0.459   -7.255     8.077   23.361   7.810
7           18.00 10.0      8.168     0.459   -1.289    13.484   30.821   8.176
4            7.00 11.0      8.168     0.507   -8.780     7.592   23.602   8.257
6            1.00 11.0      8.168     0.507  -13.027     4.633   20.131   8.441
1           28.00 15.0      8.168     0.657   -2.315    14.979   38.763  10.560
3           -3.00 16.0      8.168     0.685  -17.130     4.650   22.477  10.096
8           12.00 18.0      8.168     0.734  -10.208     9.189   29.939  10.227
colMeans     8.75 12.5      8.168     0.552   -9.163     8.168   25.723   8.900
>     print(g, sort = FALSE)
Summary for each unit: 

         obs.mean   se prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           28.00 15.0      8.168     0.657   -2.315    14.979   38.763  10.560
2            8.00 10.0      8.168     0.459   -7.255     8.077   23.361   7.810
3           -3.00 16.0      8.168     0.685  -17.130     4.650   22.477  10.096
4            7.00 11.0      8.168     0.507   -8.780     7.592   23.602   8.257
5           -1.00  9.0      8.168     0.408  -13.297     2.737   16.692   7.634
6            1.00 11.0      8.168     0.507  -13.027     4.633   20.131   8.441
7           18.00 10.0      8.168     0.459   -1.289    13.484   30.821   8.176
8           12.00 18.0      8.168     0.734  -10.208     9.189   29.939  10.227
colMeans     8.75 12.5      8.168     0.552   -9.163     8.168   25.723   8.900
>     summary(g)
Main summary:

                    obs.mean   se prior.mean shrinkage low.intv post.mean
Unit w/ min(se)        -1.00  9.0      8.168     0.408  -13.297     2.737
Unit w/ median(se)1     1.00 11.0      8.168     0.507  -13.027     4.633
Unit w/ median(se)2     7.00 11.0      8.168     0.507   -8.780     7.592
Unit w/ max(se)        12.00 18.0      8.168     0.734  -10.208     9.189
Overall Mean            8.75 12.5      8.168     0.552   -9.163     8.168
                    upp.intv post.sd
Unit w/ min(se)       16.692   7.634
Unit w/ median(se)1   20.131   8.441
Unit w/ median(se)2   23.602   8.257
Unit w/ max(se)       29.939  10.227
Overall Mean          25.723   8.900


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1           4.768         1.139


Regression Summary:

      estimate   se z.val p.val
beta0    8.168 5.73 1.425 0.154
>     plot(g)
>     plot(g, sort = FALSE)
> 
>     ### when we want to simulate pseudo datasets considering the estimated values 
>     ### as true ones.
>     gcv <- coverage(g, nsim = 10)  
> 
>     ### gcv$coverageRB, gcv$coverage10, gcv$average.coverageRB, gcv$average.coverage10,
>     ### gcv$minimum.coverageRB, gcv$minimum.coverage10, gcv$raw.resultRB, gcv$raw.result10.
> 
>     ### when we want to simulate pseudo datasets based on different values of A and 
>     ### of a regression coefficient (intercept), 
>     ### not using estimated values as true ones.
>     gcv <- coverage(g, A.or.r = 9, reg.coef = 10, nsim = 10)  
> 
>     ##################################################################################
>     # If we have one covariate and do not know a mean of the prior distribution yet, #
>     ##################################################################################
> 
>     g <- gbp(y, se, x2, model = "gr")
>     g
Summary for each unit (sorted by se): 

         obs.mean   se   X1 prior.mean shrinkage low.intv post.mean upp.intv
5           -1.00  9.0 -1.0      8.073     0.333  -15.136     2.018   17.670
2            8.00 10.0  0.0      8.198     0.381   -8.151     8.076   24.255
7           18.00 10.0  1.0      8.324     0.381   -1.593    14.314   32.320
4            7.00 11.0  2.0      8.450     0.427  -11.295     7.619   26.198
6            1.00 11.0  0.0      8.198     0.427  -14.510     4.073   20.755
1           28.00 15.0 -1.0      8.073     0.581   -5.142    16.429   43.404
3           -3.00 16.0  1.0      8.324     0.612  -20.053     3.927   23.930
8           12.00 18.0  2.0      8.450     0.666  -14.829     9.636   35.154
colMeans     8.75 12.5  0.5      8.261     0.476  -11.339     8.261   27.961
         post.sd
5          8.353
2          8.267
7          8.633
4          9.562
6          8.978
1         12.387
3         11.204
8         12.739
colMeans  10.015
>     print(g, sort = FALSE)
Summary for each unit: 

         obs.mean   se   X1 prior.mean shrinkage low.intv post.mean upp.intv
1           28.00 15.0 -1.0      8.073     0.581   -5.142    16.429   43.404
2            8.00 10.0  0.0      8.198     0.381   -8.151     8.076   24.255
3           -3.00 16.0  1.0      8.324     0.612  -20.053     3.927   23.930
4            7.00 11.0  2.0      8.450     0.427  -11.295     7.619   26.198
5           -1.00  9.0 -1.0      8.073     0.333  -15.136     2.018   17.670
6            1.00 11.0  0.0      8.198     0.427  -14.510     4.073   20.755
7           18.00 10.0  1.0      8.324     0.381   -1.593    14.314   32.320
8           12.00 18.0  2.0      8.450     0.666  -14.829     9.636   35.154
colMeans     8.75 12.5  0.5      8.261     0.476  -11.339     8.261   27.961
         post.sd
1         12.387
2          8.267
3         11.204
4          9.562
5          8.353
6          8.978
7          8.633
8         12.739
colMeans  10.015
>     summary(g)
Main summary:

                    obs.mean   se   X1 prior.mean shrinkage low.intv post.mean
Unit w/ min(se)        -1.00  9.0 -1.0      8.073     0.333  -15.136     2.018
Unit w/ median(se)1     1.00 11.0  0.0      8.198     0.427  -14.510     4.073
Unit w/ median(se)2     7.00 11.0  2.0      8.450     0.427  -11.295     7.619
Unit w/ max(se)        12.00 18.0  2.0      8.450     0.666  -14.829     9.636
Overall Mean            8.75 12.5  0.5      8.261     0.476  -11.339     8.261
                    upp.intv post.sd
Unit w/ min(se)       17.670   8.353
Unit w/ median(se)1   20.755   8.978
Unit w/ median(se)2   26.198   9.562
Unit w/ max(se)       35.154  12.739
Overall Mean          27.961  10.015


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1           5.091         1.169


Regression Summary:

      estimate    se z.val p.val
beta0    8.198 6.656 1.232 0.218
beta1    0.126 5.698 0.022 0.982
>     plot(g)
>     plot(g, sort = FALSE)
> 
>     ### when we want to simulate pseudo datasets considering the estimated values 
>     ### as true ones.
>     gcv <- coverage(g, nsim = 10)  
>  
>     ### gcv$coverageRB, gcv$coverage10, gcv$average.coverageRB, gcv$average.coverage10,
>     ### gcv$minimum.coverageRB, gcv$minimum.coverage10, gcv$raw.resultRB, gcv$raw.result10.
> 
>     ### when we want to simulate pseudo datasets based on different values of A,
>     ### of regression coefficients, and of covariate, not using estimated values 
>     ### as true ones. Two values of reg.coef are for beta0 and beta1
>     gcv <- coverage(g, A.or.r = 9, reg.coef = c(10, 1), covariates = x2, nsim = 10)  
> 
>     ################################################
>     # If we know a mean of the prior distribution, #
>     ################################################
> 
>     g <- gbp(y, se, mean.PriorDist = 8)
>     g
Summary for each unit (sorted by se): 

         obs.mean   se prior.mean shrinkage low.intv post.mean upp.intv post.sd
5           -1.00  9.0          8     0.478  -11.516     3.303   15.419   6.866
2            8.00 10.0          8     0.531   -5.426     8.000   21.426   6.850
7           18.00 10.0          8     0.531    0.123    12.693   28.613   7.275
4            7.00 11.0          8     0.578   -6.642     7.578   21.407   7.151
6            1.00 11.0          8     0.578  -10.701     5.045   18.120   7.343
1           28.00 15.0          8     0.718    0.595    13.642   34.604   8.948
3           -3.00 16.0          8     0.743  -13.448     5.176   19.275   8.380
8           12.00 18.0          8     0.786   -6.767     8.858   26.078   8.363
colMeans     8.75 12.5          8     0.618   -6.723     8.037   23.118   7.647
>     print(g, sort = FALSE)
Summary for each unit: 

         obs.mean   se prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           28.00 15.0          8     0.718    0.595    13.642   34.604   8.948
2            8.00 10.0          8     0.531   -5.426     8.000   21.426   6.850
3           -3.00 16.0          8     0.743  -13.448     5.176   19.275   8.380
4            7.00 11.0          8     0.578   -6.642     7.578   21.407   7.151
5           -1.00  9.0          8     0.478  -11.516     3.303   15.419   6.866
6            1.00 11.0          8     0.578  -10.701     5.045   18.120   7.343
7           18.00 10.0          8     0.531    0.123    12.693   28.613   7.275
8           12.00 18.0          8     0.786   -6.767     8.858   26.078   8.363
colMeans     8.75 12.5          8     0.618   -6.723     8.037   23.118   7.647
>     summary(g)
Main summary:

                    obs.mean   se prior.mean shrinkage low.intv post.mean
Unit w/ min(se)        -1.00  9.0          8     0.478  -11.516     3.303
Unit w/ median(se)1     1.00 11.0          8     0.578  -10.701     5.045
Unit w/ median(se)2     7.00 11.0          8     0.578   -6.642     7.578
Unit w/ max(se)        12.00 18.0          8     0.786   -6.767     8.858
Overall Mean            8.75 12.5          8     0.618   -6.723     8.037
                    upp.intv post.sd
Unit w/ min(se)       15.419   6.866
Unit w/ median(se)1   18.120   7.343
Unit w/ median(se)2   21.407   7.151
Unit w/ max(se)       26.078   8.363
Overall Mean          23.118   7.647


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1           4.482         1.128
>     plot(g)
>     plot(g, sort = FALSE)
> 
>     ### when we want to simulate pseudo datasets considering the estimated values 
>     ### as true ones.
>     gcv <- coverage(g, nsim = 10)  
> 
>     ### gcv$coverageRB, gcv$coverage10, gcv$average.coverageRB, gcv$average.coverage10,
>     ### gcv$minimum.coverageRB, gcv$minimum.coverage10, gcv$raw.resultRB, gcv$raw.result10.
> 
>     ### when we want to simulate pseudo datasets based on different values of A and
>     ### of 2nd level mean as true ones, not using estimated values as true ones.
>     coverage(g, A.or.r = 9, mean.PriorDist = 5, nsim = 10)  
$coverageRB
[1] 1.000 0.998 0.999 0.998 0.997 0.923 0.998 0.999

$coverageU
[1] 1.0 0.9 1.0 1.0 1.0 1.0 1.0 1.0

$average.coverageRB
[1] 0.989

$average.coverageU
[1] 0.988

$raw.resultRB
          [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
[1,] 0.9999263 0.9999784 0.9999992 0.9998798 0.9997049 0.9998918 1.0000000
[2,] 0.9999999 0.9999938 0.9999723 0.9983170 0.9999999 0.9892392 0.9999994
[3,] 1.0000000 0.9999998 0.9889193 0.9999879 0.9967635 0.9999860 0.9999999
[4,] 0.9999999 0.9999994 0.9999996 0.9991515 0.9999993 0.9991418 0.9998190
[5,] 0.9995894 0.9887787 0.9853800 0.9999480 0.9999589 0.9999947 0.9999941
[6,] 0.9924135 0.9977277 0.9999992 0.9988575 0.9999505 0.9998792 0.2459135
[7,] 0.9993767 0.9999213 0.9999991 0.9999908 0.9999988 0.9999204 0.9999901
[8,] 0.9984157 0.9999999 0.9999945 0.9999993 0.9960455 1.0000000 0.9974160
          [,8]      [,9]     [,10]
[1,] 1.0000000 0.9999978 0.9999990
[2,] 0.9913679 0.9986467 0.9999989
[3,] 0.9999987 0.9999097 0.9999999
[4,] 0.9993726 0.9874191 0.9999984
[5,] 0.9999875 0.9999927 0.9985488
[6,] 0.9995729 0.9999992 0.9999289
[7,] 0.9998942 0.9845657 0.9999861
[8,] 1.0000000 1.0000000 0.9934484

$raw.resultU
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
[1,]    1    1    1    1    1    1    1    1    1     1
[2,]    1    1    1    1    1    0    1    1    1     1
[3,]    1    1    1    1    1    1    1    1    1     1
[4,]    1    1    1    1    1    1    1    1    1     1
[5,]    1    1    1    1    1    1    1    1    1     1
[6,]    1    1    1    1    1    1    1    1    1     1
[7,]    1    1    1    1    1    1    1    1    1     1
[8,]    1    1    1    1    1    1    1    1    1     1

> 
>   ###############################################################
>   # Binomial Regression Interactive Multilevel Modeling (BRIMM) #
>   ###############################################################
> 
>     ####################################################################################
>     # If we do not have any covariate and do not know a mean of the prior distribution #
>     ####################################################################################
> 
>     b <- gbp(z, n, model = "br")
>     b
Summary for each unit (sorted by n): 

         obs.mean  n prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           0.400 45      0.267     0.622    0.222     0.317    0.421   0.051
2           0.378 45      0.267     0.622    0.218     0.309    0.408   0.049
3           0.356 45      0.267     0.622    0.213     0.300    0.396   0.047
4           0.333 45      0.267     0.622    0.207     0.292    0.385   0.045
5           0.311 45      0.267     0.622    0.202     0.284    0.374   0.044
6           0.311 45      0.267     0.622    0.202     0.284    0.374   0.044
7           0.289 45      0.267     0.622    0.195     0.275    0.363   0.043
8           0.267 45      0.267     0.622    0.188     0.267    0.354   0.042
9           0.244 45      0.267     0.622    0.180     0.258    0.345   0.042
10          0.244 45      0.267     0.622    0.180     0.258    0.345   0.042
11          0.222 45      0.267     0.622    0.172     0.250    0.337   0.042
12          0.222 45      0.267     0.622    0.172     0.250    0.337   0.042
13          0.222 45      0.267     0.622    0.172     0.250    0.337   0.042
14          0.222 45      0.267     0.622    0.172     0.250    0.337   0.042
15          0.222 45      0.267     0.622    0.172     0.250    0.337   0.042
16          0.200 45      0.267     0.622    0.163     0.242    0.330   0.043
17          0.178 45      0.267     0.622    0.154     0.233    0.323   0.043
18          0.156 45      0.267     0.622    0.144     0.225    0.318   0.044
colMeans    0.265 45      0.267     0.622    0.185     0.266    0.357   0.044
>     print(b, sort = FALSE)
Summary for each unit: 

         obs.mean  n prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           0.400 45      0.267     0.622    0.222     0.317    0.421   0.051
2           0.378 45      0.267     0.622    0.218     0.309    0.408   0.049
3           0.356 45      0.267     0.622    0.213     0.300    0.396   0.047
4           0.333 45      0.267     0.622    0.207     0.292    0.385   0.045
5           0.311 45      0.267     0.622    0.202     0.284    0.374   0.044
6           0.311 45      0.267     0.622    0.202     0.284    0.374   0.044
7           0.289 45      0.267     0.622    0.195     0.275    0.363   0.043
8           0.267 45      0.267     0.622    0.188     0.267    0.354   0.042
9           0.244 45      0.267     0.622    0.180     0.258    0.345   0.042
10          0.244 45      0.267     0.622    0.180     0.258    0.345   0.042
11          0.222 45      0.267     0.622    0.172     0.250    0.337   0.042
12          0.222 45      0.267     0.622    0.172     0.250    0.337   0.042
13          0.222 45      0.267     0.622    0.172     0.250    0.337   0.042
14          0.222 45      0.267     0.622    0.172     0.250    0.337   0.042
15          0.222 45      0.267     0.622    0.172     0.250    0.337   0.042
16          0.200 45      0.267     0.622    0.163     0.242    0.330   0.043
17          0.178 45      0.267     0.622    0.154     0.233    0.323   0.043
18          0.156 45      0.267     0.622    0.144     0.225    0.318   0.044
colMeans    0.265 45      0.267     0.622    0.185     0.266    0.357   0.044
>     summary(b)
Main summary:

                          obs.mean  n prior.mean shrinkage low.intv post.mean
Unit w/ min(obs.mean)        0.156 45      0.267     0.622    0.144     0.225
Unit w/ median(obs.mean)1    0.244 45      0.267     0.622    0.180     0.258
Unit w/ median(obs.mean)2    0.244 45      0.267     0.622    0.180     0.258
Unit w/ max(obs.mean)        0.400 45      0.267     0.622    0.222     0.317
Overall Mean                 0.265 45      0.267     0.622    0.185     0.266
                          upp.intv post.sd
Unit w/ min(obs.mean)        0.318   0.044
Unit w/ median(obs.mean)1    0.345   0.042
Unit w/ median(obs.mean)2    0.345   0.042
Unit w/ max(obs.mean)        0.421   0.051
Overall Mean                 0.357   0.044


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1          -4.305          0.82


Regression Summary:

      estimate  se   z.val p.val
beta0   -1.012 0.1 -10.153     0
>     plot(b)
>     plot(b, sort = FALSE)
> 
>     ### when we want to simulate pseudo datasets considering the estimated values 
>     ### as true ones.
>     bcv <- coverage(b, nsim = 10)  
> 
>     ### bcv$coverageRB, bcv$coverage10, bcv$average.coverageRB, bcv$average.coverage10,
>     ### bcv$minimum.coverageRB, bcv$minimum.coverage10, bcv$raw.resultRB, bcv$raw.result10.
> 
>     ### when we want to simulate pseudo datasets based on different values of r and 
>     ### of a regression coefficient (intercept), 
>     ### not using estimated values as true ones.
>     bcv <- coverage(b, A.or.r = 60, reg.coef = -1, nsim = 10)  
> 
>     ##################################################################################
>     # If we have one covariate and do not know a mean of the prior distribution yet, #
>     ##################################################################################
> 
>     b <- gbp(z, n, x1, model = "br")
>     b
Summary for each unit (sorted by n): 

         obs.mean  n   X1 prior.mean shrinkage low.intv post.mean upp.intv
1           0.400 45 1.00      0.310     0.715    0.248     0.335    0.429
2           0.378 45 1.00      0.310     0.715    0.244     0.329    0.420
3           0.356 45 1.00      0.310     0.715    0.240     0.323    0.411
4           0.333 45 1.00      0.310     0.715    0.236     0.316    0.403
5           0.311 45 1.00      0.310     0.715    0.230     0.310    0.396
6           0.311 45 0.00      0.233     0.715    0.179     0.256    0.341
7           0.289 45 0.00      0.233     0.715    0.175     0.249    0.331
8           0.267 45 0.00      0.233     0.715    0.171     0.243    0.323
9           0.244 45 0.00      0.233     0.715    0.166     0.237    0.315
10          0.244 45 1.00      0.310     0.715    0.210     0.291    0.379
11          0.222 45 0.00      0.233     0.715    0.161     0.230    0.308
12          0.222 45 0.00      0.233     0.715    0.161     0.230    0.308
13          0.222 45 0.00      0.233     0.715    0.161     0.230    0.308
14          0.222 45 1.00      0.310     0.715    0.202     0.285    0.375
15          0.222 45 1.00      0.310     0.715    0.202     0.285    0.375
16          0.200 45 0.00      0.233     0.715    0.155     0.224    0.302
17          0.178 45 0.00      0.233     0.715    0.148     0.218    0.297
18          0.156 45 0.00      0.233     0.715    0.140     0.211    0.292
colMeans    0.265 45 0.44      0.267     0.715    0.191     0.267    0.351
         post.sd
1          0.046
2          0.045
3          0.044
4          0.043
5          0.042
6          0.041
7          0.040
8          0.039
9          0.038
10         0.043
11         0.038
12         0.038
13         0.038
14         0.044
15         0.044
16         0.038
17         0.038
18         0.039
colMeans   0.041
>     print(b, sort = FALSE)
Summary for each unit: 

         obs.mean  n   X1 prior.mean shrinkage low.intv post.mean upp.intv
1           0.400 45 1.00      0.310     0.715    0.248     0.335    0.429
2           0.378 45 1.00      0.310     0.715    0.244     0.329    0.420
3           0.356 45 1.00      0.310     0.715    0.240     0.323    0.411
4           0.333 45 1.00      0.310     0.715    0.236     0.316    0.403
5           0.311 45 1.00      0.310     0.715    0.230     0.310    0.396
6           0.311 45 0.00      0.233     0.715    0.179     0.256    0.341
7           0.289 45 0.00      0.233     0.715    0.175     0.249    0.331
8           0.267 45 0.00      0.233     0.715    0.171     0.243    0.323
9           0.244 45 0.00      0.233     0.715    0.166     0.237    0.315
10          0.244 45 1.00      0.310     0.715    0.210     0.291    0.379
11          0.222 45 0.00      0.233     0.715    0.161     0.230    0.308
12          0.222 45 0.00      0.233     0.715    0.161     0.230    0.308
13          0.222 45 0.00      0.233     0.715    0.161     0.230    0.308
14          0.222 45 1.00      0.310     0.715    0.202     0.285    0.375
15          0.222 45 1.00      0.310     0.715    0.202     0.285    0.375
16          0.200 45 0.00      0.233     0.715    0.155     0.224    0.302
17          0.178 45 0.00      0.233     0.715    0.148     0.218    0.297
18          0.156 45 0.00      0.233     0.715    0.140     0.211    0.292
colMeans    0.265 45 0.44      0.267     0.715    0.191     0.267    0.351
         post.sd
1          0.046
2          0.045
3          0.044
4          0.043
5          0.042
6          0.041
7          0.040
8          0.039
9          0.038
10         0.043
11         0.038
12         0.038
13         0.038
14         0.044
15         0.044
16         0.038
17         0.038
18         0.039
colMeans   0.041
>     summary(b)
Main summary:

                          obs.mean  n    X1 prior.mean shrinkage low.intv
Unit w/ min(obs.mean)        0.156 45 0.000      0.233     0.715    0.140
Unit w/ median(obs.mean)1    0.244 45 0.000      0.233     0.715    0.166
Unit w/ median(obs.mean)2    0.244 45 1.000      0.310     0.715    0.210
Unit w/ max(obs.mean)        0.400 45 1.000      0.310     0.715    0.248
Overall Mean                 0.265 45 0.444      0.267     0.715    0.191
                          post.mean upp.intv post.sd
Unit w/ min(obs.mean)         0.211    0.292   0.039
Unit w/ median(obs.mean)1     0.237    0.315   0.038
Unit w/ median(obs.mean)2     0.291    0.379   0.043
Unit w/ max(obs.mean)         0.335    0.429   0.046
Overall Mean                  0.267    0.351   0.041


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1          -4.727         0.957


Regression Summary:

      estimate    se  z.val p.val
beta0   -1.194 0.131 -9.129 0.000
beta1    0.389 0.187  2.074 0.038
>     plot(b)
>     plot(b, sort = FALSE)
> 
>     ### when we want to simulate pseudo datasets considering the estimated values 
>     ### as true ones.
>     bcv <- coverage(b, nsim = 10)  
> 
>     ### bcv$coverageRB, bcv$coverage10, bcv$average.coverageRB, bcv$average.coverage10,
>     ### bcv$minimum.coverageRB, bcv$minimum.coverage10, bcv$raw.resultRB, bcv$raw.result10.
> 
>     ### when we want to simulate pseudo datasets based on different values of r,
>     ### of regression coefficients, and of covariate, not using estimated values 
>     ### as true ones. Two values of reg.coef are for beta0 and beta1
>     bcv <- coverage(b, A.or.r = 60, reg.coef = c(-1, 0), covariates = x1, nsim = 10)  
> 
>     ################################################
>     # If we know a mean of the prior distribution, #
>     ################################################
> 
>     b <- gbp(z, n, mean.PriorDist = 0.265, model = "br")
>     b
Summary for each unit (sorted by n): 

         obs.mean  n prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           0.400 45      0.265      0.65    0.230     0.312    0.401   0.044
2           0.378 45      0.265      0.65    0.224     0.304    0.391   0.043
3           0.356 45      0.265      0.65    0.218     0.297    0.382   0.042
4           0.333 45      0.265      0.65    0.212     0.289    0.372   0.041
5           0.311 45      0.265      0.65    0.206     0.281    0.363   0.040
6           0.311 45      0.265      0.65    0.206     0.281    0.363   0.040
7           0.289 45      0.265      0.65    0.200     0.273    0.354   0.039
8           0.267 45      0.265      0.65    0.193     0.266    0.345   0.039
9           0.244 45      0.265      0.65    0.186     0.258    0.337   0.039
10          0.244 45      0.265      0.65    0.186     0.258    0.337   0.039
11          0.222 45      0.265      0.65    0.179     0.250    0.329   0.038
12          0.222 45      0.265      0.65    0.179     0.250    0.329   0.038
13          0.222 45      0.265      0.65    0.179     0.250    0.329   0.038
14          0.222 45      0.265      0.65    0.179     0.250    0.329   0.038
15          0.222 45      0.265      0.65    0.179     0.250    0.329   0.038
16          0.200 45      0.265      0.65    0.172     0.242    0.321   0.038
17          0.178 45      0.265      0.65    0.164     0.234    0.313   0.038
18          0.156 45      0.265      0.65    0.156     0.227    0.306   0.038
colMeans    0.265 45      0.265      0.65    0.191     0.265    0.346   0.040
>     print(b, sort = FALSE)
Summary for each unit: 

         obs.mean  n prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           0.400 45      0.265      0.65    0.230     0.312    0.401   0.044
2           0.378 45      0.265      0.65    0.224     0.304    0.391   0.043
3           0.356 45      0.265      0.65    0.218     0.297    0.382   0.042
4           0.333 45      0.265      0.65    0.212     0.289    0.372   0.041
5           0.311 45      0.265      0.65    0.206     0.281    0.363   0.040
6           0.311 45      0.265      0.65    0.206     0.281    0.363   0.040
7           0.289 45      0.265      0.65    0.200     0.273    0.354   0.039
8           0.267 45      0.265      0.65    0.193     0.266    0.345   0.039
9           0.244 45      0.265      0.65    0.186     0.258    0.337   0.039
10          0.244 45      0.265      0.65    0.186     0.258    0.337   0.039
11          0.222 45      0.265      0.65    0.179     0.250    0.329   0.038
12          0.222 45      0.265      0.65    0.179     0.250    0.329   0.038
13          0.222 45      0.265      0.65    0.179     0.250    0.329   0.038
14          0.222 45      0.265      0.65    0.179     0.250    0.329   0.038
15          0.222 45      0.265      0.65    0.179     0.250    0.329   0.038
16          0.200 45      0.265      0.65    0.172     0.242    0.321   0.038
17          0.178 45      0.265      0.65    0.164     0.234    0.313   0.038
18          0.156 45      0.265      0.65    0.156     0.227    0.306   0.038
colMeans    0.265 45      0.265      0.65    0.191     0.265    0.346   0.040
>     summary(b)
Main summary:

                          obs.mean  n prior.mean shrinkage low.intv post.mean
Unit w/ min(obs.mean)        0.156 45      0.265      0.65    0.156     0.227
Unit w/ median(obs.mean)1    0.244 45      0.265      0.65    0.186     0.258
Unit w/ median(obs.mean)2    0.244 45      0.265      0.65    0.186     0.258
Unit w/ max(obs.mean)        0.400 45      0.265      0.65    0.230     0.312
Overall Mean                 0.265 45      0.265      0.65    0.191     0.265
                          upp.intv post.sd
Unit w/ min(obs.mean)        0.306   0.038
Unit w/ median(obs.mean)1    0.337   0.039
Unit w/ median(obs.mean)2    0.337   0.039
Unit w/ max(obs.mean)        0.401   0.044
Overall Mean                 0.346   0.040


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1          -4.425         0.837
>     plot(b)
>     plot(b, sort = FALSE)
> 
>     ### when we want to simulate pseudo datasets considering the estimated values 
>     ### as true ones.
>     bcv <- coverage(b, nsim = 10)  
> 
>     ### bcv$coverageRB, bcv$coverage10, bcv$average.coverageRB, bcv$average.coverage10,
>     ### bcv$minimum.coverageRB, bcv$minimum.coverage10, bcv$raw.resultRB, bcv$raw.result10.
> 
>     ### when we want to simulate pseudo datasets based on different values of r and
>     ### of 2nd level mean as true ones, not using estimated values as true ones.
>     bcv <- coverage(b, A.or.r = 60, mean.PriorDist = 0.3, nsim = 10)  
> 
>   ##############################################################
>   # Poisson Regression Interactive Multilevel Modeling (PRIMM) #
>   ##############################################################
> 
>     ####################################################################################
>     # If we do not have any covariate and do not know a mean of the prior distribution #
>     ####################################################################################
> 
>     p <- gbp(z, n, model = "pr")
>     p
Summary for each unit (sorted by n): 

         obs.mean  n prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           0.400 45      0.268     0.717    0.211     0.305    0.418   0.053
2           0.378 45      0.268     0.717    0.208     0.299    0.407   0.051
3           0.356 45      0.268     0.717    0.205     0.293    0.396   0.049
4           0.333 45      0.268     0.717    0.202     0.287    0.386   0.047
5           0.311 45      0.268     0.717    0.198     0.280    0.377   0.046
6           0.311 45      0.268     0.717    0.198     0.280    0.377   0.046
7           0.289 45      0.268     0.717    0.194     0.274    0.368   0.045
8           0.267 45      0.268     0.717    0.189     0.268    0.361   0.044
9           0.244 45      0.268     0.717    0.183     0.262    0.353   0.044
10          0.244 45      0.268     0.717    0.183     0.262    0.353   0.044
11          0.222 45      0.268     0.717    0.177     0.255    0.347   0.043
12          0.222 45      0.268     0.717    0.177     0.255    0.347   0.043
13          0.222 45      0.268     0.717    0.177     0.255    0.347   0.043
14          0.222 45      0.268     0.717    0.177     0.255    0.347   0.043
15          0.222 45      0.268     0.717    0.177     0.255    0.347   0.043
16          0.200 45      0.268     0.717    0.171     0.249    0.342   0.044
17          0.178 45      0.268     0.717    0.164     0.243    0.337   0.044
18          0.156 45      0.268     0.717    0.156     0.236    0.333   0.045
colMeans    0.265 45      0.268     0.717    0.186     0.267    0.364   0.045
>     print(p, sort = FALSE)
Summary for each unit: 

         obs.mean  n prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           0.400 45      0.268     0.717    0.211     0.305    0.418   0.053
2           0.378 45      0.268     0.717    0.208     0.299    0.407   0.051
3           0.356 45      0.268     0.717    0.205     0.293    0.396   0.049
4           0.333 45      0.268     0.717    0.202     0.287    0.386   0.047
5           0.311 45      0.268     0.717    0.198     0.280    0.377   0.046
6           0.311 45      0.268     0.717    0.198     0.280    0.377   0.046
7           0.289 45      0.268     0.717    0.194     0.274    0.368   0.045
8           0.267 45      0.268     0.717    0.189     0.268    0.361   0.044
9           0.244 45      0.268     0.717    0.183     0.262    0.353   0.044
10          0.244 45      0.268     0.717    0.183     0.262    0.353   0.044
11          0.222 45      0.268     0.717    0.177     0.255    0.347   0.043
12          0.222 45      0.268     0.717    0.177     0.255    0.347   0.043
13          0.222 45      0.268     0.717    0.177     0.255    0.347   0.043
14          0.222 45      0.268     0.717    0.177     0.255    0.347   0.043
15          0.222 45      0.268     0.717    0.177     0.255    0.347   0.043
16          0.200 45      0.268     0.717    0.171     0.249    0.342   0.044
17          0.178 45      0.268     0.717    0.164     0.243    0.337   0.044
18          0.156 45      0.268     0.717    0.156     0.236    0.333   0.045
colMeans    0.265 45      0.268     0.717    0.186     0.267    0.364   0.045
>     summary(p)
Main summary:

                          obs.mean  n prior.mean shrinkage low.intv post.mean
Unit w/ min(obs.mean)        0.156 45      0.268     0.717    0.156     0.236
Unit w/ median(obs.mean)1    0.244 45      0.268     0.717    0.183     0.262
Unit w/ median(obs.mean)2    0.244 45      0.268     0.717    0.183     0.262
Unit w/ max(obs.mean)        0.400 45      0.268     0.717    0.211     0.305
Overall Mean                 0.265 45      0.268     0.717    0.186     0.267
                          upp.intv post.sd
Unit w/ min(obs.mean)        0.333   0.045
Unit w/ median(obs.mean)1    0.353   0.044
Unit w/ median(obs.mean)2    0.353   0.044
Unit w/ max(obs.mean)        0.418   0.053
Overall Mean                 0.364   0.045


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1          -4.738         0.945


Regression Summary:

      estimate   se   z.val p.val
beta0   -1.319 0.08 -16.522     0
>     plot(p)
>     plot(p, sort = FALSE)
> 
>     ### when we want to simulate pseudo datasets considering the estimated values 
>     ### as true ones.
>     pcv <- coverage(p, nsim = 10)  
> 
>     ### pcv$coverageRB, pcv$coverage10, pcv$average.coverageRB, pcv$average.coverage10,
>     ### pcv$minimum.coverageRB, pcv$minimum.coverage10, pcv$raw.resultRB, pcv$raw.result10.
> 
>     ### when we want to simulate pseudo datasets based on different values of r and 
>     ### of a regression coefficient (intercept), 
>     ### not using estimated values as true ones.
>     pcv <- coverage(p, A.or.r = 60, reg.coef = -5, nsim = 10)  
[1] "1"     "error"
[1] "2"     "error"
[1] "4"     "error"
[1] "6"     "error"
[1] "7"     "error"
[1] "9"     "error"
> 
>     ##################################################################################
>     # If we have one covariate and do not know a mean of the prior distribution yet, #
>     ##################################################################################
> 
>     p <- gbp(z, n, x1, model = "pr")
>     p
Summary for each unit (sorted by n): 

         obs.mean  n   X1 prior.mean shrinkage low.intv post.mean upp.intv
1           0.400 45 1.00      0.312     0.776    0.239     0.331    0.439
2           0.378 45 1.00      0.312     0.776    0.236     0.327    0.431
3           0.356 45 1.00      0.312     0.776    0.233     0.322    0.424
4           0.333 45 1.00      0.312     0.776    0.229     0.317    0.417
5           0.311 45 1.00      0.312     0.776    0.226     0.312    0.411
6           0.311 45 0.00      0.235     0.776    0.174     0.252    0.344
7           0.289 45 0.00      0.235     0.776    0.172     0.247    0.336
8           0.267 45 0.00      0.235     0.776    0.168     0.242    0.328
9           0.244 45 0.00      0.235     0.776    0.165     0.237    0.322
10          0.244 45 1.00      0.312     0.776    0.211     0.297    0.397
11          0.222 45 0.00      0.235     0.776    0.161     0.232    0.316
12          0.222 45 0.00      0.235     0.776    0.161     0.232    0.316
13          0.222 45 0.00      0.235     0.776    0.161     0.232    0.316
14          0.222 45 1.00      0.312     0.776    0.205     0.292    0.393
15          0.222 45 1.00      0.312     0.776    0.205     0.292    0.393
16          0.200 45 0.00      0.235     0.776    0.156     0.227    0.311
17          0.178 45 0.00      0.235     0.776    0.151     0.222    0.306
18          0.156 45 0.00      0.235     0.776    0.145     0.217    0.303
colMeans    0.265 45 0.44      0.269     0.776    0.189     0.268    0.361
         post.sd
1          0.051
2          0.050
3          0.049
4          0.048
5          0.048
6          0.043
7          0.042
8          0.041
9          0.040
10         0.048
11         0.040
12         0.040
13         0.040
14         0.048
15         0.048
16         0.040
17         0.040
18         0.040
colMeans   0.044
>     print(p, sort = FALSE)
Summary for each unit: 

         obs.mean  n   X1 prior.mean shrinkage low.intv post.mean upp.intv
1           0.400 45 1.00      0.312     0.776    0.239     0.331    0.439
2           0.378 45 1.00      0.312     0.776    0.236     0.327    0.431
3           0.356 45 1.00      0.312     0.776    0.233     0.322    0.424
4           0.333 45 1.00      0.312     0.776    0.229     0.317    0.417
5           0.311 45 1.00      0.312     0.776    0.226     0.312    0.411
6           0.311 45 0.00      0.235     0.776    0.174     0.252    0.344
7           0.289 45 0.00      0.235     0.776    0.172     0.247    0.336
8           0.267 45 0.00      0.235     0.776    0.168     0.242    0.328
9           0.244 45 0.00      0.235     0.776    0.165     0.237    0.322
10          0.244 45 1.00      0.312     0.776    0.211     0.297    0.397
11          0.222 45 0.00      0.235     0.776    0.161     0.232    0.316
12          0.222 45 0.00      0.235     0.776    0.161     0.232    0.316
13          0.222 45 0.00      0.235     0.776    0.161     0.232    0.316
14          0.222 45 1.00      0.312     0.776    0.205     0.292    0.393
15          0.222 45 1.00      0.312     0.776    0.205     0.292    0.393
16          0.200 45 0.00      0.235     0.776    0.156     0.227    0.311
17          0.178 45 0.00      0.235     0.776    0.151     0.222    0.306
18          0.156 45 0.00      0.235     0.776    0.145     0.217    0.303
colMeans    0.265 45 0.44      0.269     0.776    0.189     0.268    0.361
         post.sd
1          0.051
2          0.050
3          0.049
4          0.048
5          0.048
6          0.043
7          0.042
8          0.041
9          0.040
10         0.048
11         0.040
12         0.040
13         0.040
14         0.048
15         0.048
16         0.040
17         0.040
18         0.040
colMeans   0.044
>     summary(p)
Main summary:

                          obs.mean  n    X1 prior.mean shrinkage low.intv
Unit w/ min(obs.mean)        0.156 45 0.000      0.235     0.776    0.145
Unit w/ median(obs.mean)1    0.244 45 0.000      0.235     0.776    0.165
Unit w/ median(obs.mean)2    0.244 45 1.000      0.312     0.776    0.211
Unit w/ max(obs.mean)        0.400 45 1.000      0.312     0.776    0.239
Overall Mean                 0.265 45 0.444      0.269     0.776    0.189
                          post.mean upp.intv post.sd
Unit w/ min(obs.mean)         0.217    0.303   0.040
Unit w/ median(obs.mean)1     0.237    0.322   0.040
Unit w/ median(obs.mean)2     0.297    0.397   0.048
Unit w/ max(obs.mean)         0.331    0.439   0.051
Overall Mean                  0.268    0.361   0.044


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1          -5.049         1.024


Regression Summary:

      estimate    se   z.val p.val
beta0   -1.455 0.110 -13.204 0.000
beta1    0.284 0.154   1.848 0.065
>     plot(p)
>     plot(p, sort = FALSE)
> 
>     ### when we want to simulate pseudo datasets considering the estimated values 
>     ### as true ones.
>     pcv <- coverage(p, nsim = 10)  
> 
>     ### pcv$coverageRB, pcv$coverage10, pcv$average.coverageRB, pcv$average.coverage10,
>     ### pcv$minimum.coverageRB, pcv$minimum.coverage10, pcv$raw.resultRB, pcv$raw.result10.
> 
>     ### when we want to simulate pseudo datasets based on different values of r,
>     ### of regression coefficients, and of covariate, not using estimated values 
>     ### as true ones. Two values of reg.coef are for beta0 and beta1
>     pcv <- coverage(p, A.or.r = 60, reg.coef = c(-2, 0), covariates = x1, nsim = 10)  
> 
>     ################################################
>     # If we know a mean of the prior distribution, #
>     ################################################
> 
>     p <- gbp(z, n, mean.PriorDist = 0.265, model = "pr")
>     p
Summary for each unit (sorted by n): 

         obs.mean  n prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           0.400 45      0.265     0.741    0.213     0.300    0.402   0.048
2           0.378 45      0.265     0.741    0.211     0.294    0.391   0.046
3           0.356 45      0.265     0.741    0.208     0.288    0.381   0.044
4           0.333 45      0.265     0.741    0.206     0.283    0.372   0.042
5           0.311 45      0.265     0.741    0.202     0.277    0.363   0.041
6           0.311 45      0.265     0.741    0.202     0.277    0.363   0.041
7           0.289 45      0.265     0.741    0.199     0.271    0.355   0.040
8           0.267 45      0.265     0.741    0.194     0.265    0.347   0.039
9           0.244 45      0.265     0.741    0.190     0.260    0.341   0.039
10          0.244 45      0.265     0.741    0.190     0.260    0.341   0.039
11          0.222 45      0.265     0.741    0.184     0.254    0.335   0.039
12          0.222 45      0.265     0.741    0.184     0.254    0.335   0.039
13          0.222 45      0.265     0.741    0.184     0.254    0.335   0.039
14          0.222 45      0.265     0.741    0.184     0.254    0.335   0.039
15          0.222 45      0.265     0.741    0.184     0.254    0.335   0.039
16          0.200 45      0.265     0.741    0.178     0.248    0.330   0.039
17          0.178 45      0.265     0.741    0.171     0.242    0.326   0.039
18          0.156 45      0.265     0.741    0.164     0.237    0.322   0.040
colMeans    0.265 45      0.265     0.741    0.192     0.265    0.350   0.041
>     print(p, sort = FALSE)
Summary for each unit: 

         obs.mean  n prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           0.400 45      0.265     0.741    0.213     0.300    0.402   0.048
2           0.378 45      0.265     0.741    0.211     0.294    0.391   0.046
3           0.356 45      0.265     0.741    0.208     0.288    0.381   0.044
4           0.333 45      0.265     0.741    0.206     0.283    0.372   0.042
5           0.311 45      0.265     0.741    0.202     0.277    0.363   0.041
6           0.311 45      0.265     0.741    0.202     0.277    0.363   0.041
7           0.289 45      0.265     0.741    0.199     0.271    0.355   0.040
8           0.267 45      0.265     0.741    0.194     0.265    0.347   0.039
9           0.244 45      0.265     0.741    0.190     0.260    0.341   0.039
10          0.244 45      0.265     0.741    0.190     0.260    0.341   0.039
11          0.222 45      0.265     0.741    0.184     0.254    0.335   0.039
12          0.222 45      0.265     0.741    0.184     0.254    0.335   0.039
13          0.222 45      0.265     0.741    0.184     0.254    0.335   0.039
14          0.222 45      0.265     0.741    0.184     0.254    0.335   0.039
15          0.222 45      0.265     0.741    0.184     0.254    0.335   0.039
16          0.200 45      0.265     0.741    0.178     0.248    0.330   0.039
17          0.178 45      0.265     0.741    0.171     0.242    0.326   0.039
18          0.156 45      0.265     0.741    0.164     0.237    0.322   0.040
colMeans    0.265 45      0.265     0.741    0.192     0.265    0.350   0.041
>     summary(p)
Main summary:

                          obs.mean  n prior.mean shrinkage low.intv post.mean
Unit w/ min(obs.mean)        0.156 45      0.265     0.741    0.164     0.237
Unit w/ median(obs.mean)1    0.244 45      0.265     0.741    0.190     0.260
Unit w/ median(obs.mean)2    0.244 45      0.265     0.741    0.190     0.260
Unit w/ max(obs.mean)        0.400 45      0.265     0.741    0.213     0.300
Overall Mean                 0.265 45      0.265     0.741    0.192     0.265
                          upp.intv post.sd
Unit w/ min(obs.mean)        0.322   0.040
Unit w/ median(obs.mean)1    0.341   0.039
Unit w/ median(obs.mean)2    0.341   0.039
Unit w/ max(obs.mean)        0.402   0.048
Overall Mean                 0.350   0.041


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1          -4.859         0.955
>     plot(p)
>     plot(p, sort = FALSE)
> 
>     ### when we want to simulate pseudo datasets considering the estimated values 
>     ### as true ones.
>     pcv <- coverage(p, nsim = 10)  
> 
>     ### pcv$coverageRB, pcv$coverage10, pcv$average.coverageRB, pcv$average.coverage10,
>     ### pcv$minimum.coverageRB, pcv$minimum.coverage10, pcv$raw.resultRB, pcv$raw.result10.
> 
>     ### when we want to simulate pseudo datasets based on different values of r and
>     ### of 2nd level mean as true ones, not using estimated values as true ones.
>     pcv <- coverage(p, A.or.r = 60, mean.PriorDist = 0.3, nsim = 10)  
> 
> 
> 
> 
> cleanEx()
> nameEx("baseball")
> ### * baseball
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: baseball
> ### Title: Baseball Data
> ### Aliases: baseball
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
>   data(baseball)
>   z <- baseball$Hits
>   n <- baseball$At.Bats
>   x <- ifelse(baseball$Position == "fielder", 1, 0)
> 
> 
>   ###############################################################################
>   # We do have one covariates and do not know a mean of the prior distribution. #
>   ###############################################################################
> 
>   ###############################################################
>   # Binomial Regression Interactive Multilevel Modeling (BRIMM) #
>   ###############################################################
> 
>   b <- gbp(z, n, x, model = "br")
>   b
Summary for each unit (sorted by n): 

         obs.mean  n   X1 prior.mean shrinkage low.intv post.mean upp.intv
1           0.400 45 1.00      0.310     0.715    0.248     0.335    0.429
2           0.378 45 1.00      0.310     0.715    0.244     0.329    0.420
3           0.356 45 1.00      0.310     0.715    0.240     0.323    0.411
4           0.333 45 1.00      0.310     0.715    0.236     0.316    0.403
5           0.311 45 1.00      0.310     0.715    0.230     0.310    0.396
6           0.311 45 0.00      0.233     0.715    0.179     0.256    0.341
7           0.289 45 0.00      0.233     0.715    0.175     0.249    0.331
8           0.267 45 0.00      0.233     0.715    0.171     0.243    0.323
9           0.244 45 0.00      0.233     0.715    0.166     0.237    0.315
10          0.244 45 1.00      0.310     0.715    0.210     0.291    0.379
11          0.222 45 0.00      0.233     0.715    0.161     0.230    0.308
12          0.222 45 0.00      0.233     0.715    0.161     0.230    0.308
13          0.222 45 0.00      0.233     0.715    0.161     0.230    0.308
14          0.222 45 1.00      0.310     0.715    0.202     0.285    0.375
15          0.222 45 1.00      0.310     0.715    0.202     0.285    0.375
16          0.200 45 0.00      0.233     0.715    0.155     0.224    0.302
17          0.178 45 0.00      0.233     0.715    0.148     0.218    0.297
18          0.156 45 0.00      0.233     0.715    0.140     0.211    0.292
colMeans    0.265 45 0.44      0.267     0.715    0.191     0.267    0.351
         post.sd
1          0.046
2          0.045
3          0.044
4          0.043
5          0.042
6          0.041
7          0.040
8          0.039
9          0.038
10         0.043
11         0.038
12         0.038
13         0.038
14         0.044
15         0.044
16         0.038
17         0.038
18         0.039
colMeans   0.041
>   print(b, sort = FALSE)
Summary for each unit: 

         obs.mean  n   X1 prior.mean shrinkage low.intv post.mean upp.intv
1           0.400 45 1.00      0.310     0.715    0.248     0.335    0.429
2           0.378 45 1.00      0.310     0.715    0.244     0.329    0.420
3           0.356 45 1.00      0.310     0.715    0.240     0.323    0.411
4           0.333 45 1.00      0.310     0.715    0.236     0.316    0.403
5           0.311 45 1.00      0.310     0.715    0.230     0.310    0.396
6           0.311 45 0.00      0.233     0.715    0.179     0.256    0.341
7           0.289 45 0.00      0.233     0.715    0.175     0.249    0.331
8           0.267 45 0.00      0.233     0.715    0.171     0.243    0.323
9           0.244 45 0.00      0.233     0.715    0.166     0.237    0.315
10          0.244 45 1.00      0.310     0.715    0.210     0.291    0.379
11          0.222 45 0.00      0.233     0.715    0.161     0.230    0.308
12          0.222 45 0.00      0.233     0.715    0.161     0.230    0.308
13          0.222 45 0.00      0.233     0.715    0.161     0.230    0.308
14          0.222 45 1.00      0.310     0.715    0.202     0.285    0.375
15          0.222 45 1.00      0.310     0.715    0.202     0.285    0.375
16          0.200 45 0.00      0.233     0.715    0.155     0.224    0.302
17          0.178 45 0.00      0.233     0.715    0.148     0.218    0.297
18          0.156 45 0.00      0.233     0.715    0.140     0.211    0.292
colMeans    0.265 45 0.44      0.267     0.715    0.191     0.267    0.351
         post.sd
1          0.046
2          0.045
3          0.044
4          0.043
5          0.042
6          0.041
7          0.040
8          0.039
9          0.038
10         0.043
11         0.038
12         0.038
13         0.038
14         0.044
15         0.044
16         0.038
17         0.038
18         0.039
colMeans   0.041
>   summary(b)
Main summary:

                          obs.mean  n    X1 prior.mean shrinkage low.intv
Unit w/ min(obs.mean)        0.156 45 0.000      0.233     0.715    0.140
Unit w/ median(obs.mean)1    0.244 45 0.000      0.233     0.715    0.166
Unit w/ median(obs.mean)2    0.244 45 1.000      0.310     0.715    0.210
Unit w/ max(obs.mean)        0.400 45 1.000      0.310     0.715    0.248
Overall Mean                 0.265 45 0.444      0.267     0.715    0.191
                          post.mean upp.intv post.sd
Unit w/ min(obs.mean)         0.211    0.292   0.039
Unit w/ median(obs.mean)1     0.237    0.315   0.038
Unit w/ median(obs.mean)2     0.291    0.379   0.043
Unit w/ max(obs.mean)         0.335    0.429   0.046
Overall Mean                  0.267    0.351   0.041


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1          -4.727         0.957


Regression Summary:

      estimate    se  z.val p.val
beta0   -1.194 0.131 -9.129 0.000
beta1    0.389 0.187  2.074 0.038
>   plot(b)
>   plot(b, sort = FALSE)
> 
>   ##############################################################
>   # Poisson Regression Interactive Multilevel Modeling (PRIMM) #
>   ##############################################################
> 
>   p <- gbp(z, n, x, model = "pr")
>   p
Summary for each unit (sorted by n): 

         obs.mean  n   X1 prior.mean shrinkage low.intv post.mean upp.intv
1           0.400 45 1.00      0.312     0.776    0.239     0.331    0.439
2           0.378 45 1.00      0.312     0.776    0.236     0.327    0.431
3           0.356 45 1.00      0.312     0.776    0.233     0.322    0.424
4           0.333 45 1.00      0.312     0.776    0.229     0.317    0.417
5           0.311 45 1.00      0.312     0.776    0.226     0.312    0.411
6           0.311 45 0.00      0.235     0.776    0.174     0.252    0.344
7           0.289 45 0.00      0.235     0.776    0.172     0.247    0.336
8           0.267 45 0.00      0.235     0.776    0.168     0.242    0.328
9           0.244 45 0.00      0.235     0.776    0.165     0.237    0.322
10          0.244 45 1.00      0.312     0.776    0.211     0.297    0.397
11          0.222 45 0.00      0.235     0.776    0.161     0.232    0.316
12          0.222 45 0.00      0.235     0.776    0.161     0.232    0.316
13          0.222 45 0.00      0.235     0.776    0.161     0.232    0.316
14          0.222 45 1.00      0.312     0.776    0.205     0.292    0.393
15          0.222 45 1.00      0.312     0.776    0.205     0.292    0.393
16          0.200 45 0.00      0.235     0.776    0.156     0.227    0.311
17          0.178 45 0.00      0.235     0.776    0.151     0.222    0.306
18          0.156 45 0.00      0.235     0.776    0.145     0.217    0.303
colMeans    0.265 45 0.44      0.269     0.776    0.189     0.268    0.361
         post.sd
1          0.051
2          0.050
3          0.049
4          0.048
5          0.048
6          0.043
7          0.042
8          0.041
9          0.040
10         0.048
11         0.040
12         0.040
13         0.040
14         0.048
15         0.048
16         0.040
17         0.040
18         0.040
colMeans   0.044
>   print(p, sort = FALSE)
Summary for each unit: 

         obs.mean  n   X1 prior.mean shrinkage low.intv post.mean upp.intv
1           0.400 45 1.00      0.312     0.776    0.239     0.331    0.439
2           0.378 45 1.00      0.312     0.776    0.236     0.327    0.431
3           0.356 45 1.00      0.312     0.776    0.233     0.322    0.424
4           0.333 45 1.00      0.312     0.776    0.229     0.317    0.417
5           0.311 45 1.00      0.312     0.776    0.226     0.312    0.411
6           0.311 45 0.00      0.235     0.776    0.174     0.252    0.344
7           0.289 45 0.00      0.235     0.776    0.172     0.247    0.336
8           0.267 45 0.00      0.235     0.776    0.168     0.242    0.328
9           0.244 45 0.00      0.235     0.776    0.165     0.237    0.322
10          0.244 45 1.00      0.312     0.776    0.211     0.297    0.397
11          0.222 45 0.00      0.235     0.776    0.161     0.232    0.316
12          0.222 45 0.00      0.235     0.776    0.161     0.232    0.316
13          0.222 45 0.00      0.235     0.776    0.161     0.232    0.316
14          0.222 45 1.00      0.312     0.776    0.205     0.292    0.393
15          0.222 45 1.00      0.312     0.776    0.205     0.292    0.393
16          0.200 45 0.00      0.235     0.776    0.156     0.227    0.311
17          0.178 45 0.00      0.235     0.776    0.151     0.222    0.306
18          0.156 45 0.00      0.235     0.776    0.145     0.217    0.303
colMeans    0.265 45 0.44      0.269     0.776    0.189     0.268    0.361
         post.sd
1          0.051
2          0.050
3          0.049
4          0.048
5          0.048
6          0.043
7          0.042
8          0.041
9          0.040
10         0.048
11         0.040
12         0.040
13         0.040
14         0.048
15         0.048
16         0.040
17         0.040
18         0.040
colMeans   0.044
>   summary(p)
Main summary:

                          obs.mean  n    X1 prior.mean shrinkage low.intv
Unit w/ min(obs.mean)        0.156 45 0.000      0.235     0.776    0.145
Unit w/ median(obs.mean)1    0.244 45 0.000      0.235     0.776    0.165
Unit w/ median(obs.mean)2    0.244 45 1.000      0.312     0.776    0.211
Unit w/ max(obs.mean)        0.400 45 1.000      0.312     0.776    0.239
Overall Mean                 0.265 45 0.444      0.269     0.776    0.189
                          post.mean upp.intv post.sd
Unit w/ min(obs.mean)         0.217    0.303   0.040
Unit w/ median(obs.mean)1     0.237    0.322   0.040
Unit w/ median(obs.mean)2     0.297    0.397   0.048
Unit w/ max(obs.mean)         0.331    0.439   0.051
Overall Mean                  0.268    0.361   0.044


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1          -5.049         1.024


Regression Summary:

      estimate    se   z.val p.val
beta0   -1.455 0.110 -13.204 0.000
beta1    0.284 0.154   1.848 0.065
>   plot(p)
>   plot(p, sort = FALSE)
> 
> 
> 
> 
> cleanEx()
> nameEx("coverage")
> ### * coverage
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coverage
> ### Title: Estimating Coverage Probability
> ### Aliases: coverage
> ### Keywords: methods
> 
> ### ** Examples
> 
> 
>   # Loading datasets
>   data(schools)
>   y <- schools$y
>   se <- schools$se
> 
>   # Arbitrary covariate for schools data
>   x2 <- rep(c(-1, 0, 1, 2), 2)
> 
>   # baseball data where z is Hits and n is AtBats
>   z <- c(18, 17, 16, 15, 14, 14, 13, 12, 11, 11, 10, 10, 10, 10, 10,  9,  8,  7)
>   n <- c(45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45)
> 
>   # One covariate: 1 if a player is an outfielder and 0 otherwise
>   x1 <- c(1,  1,  1,  1,  1,  0,  0,  0,  0,  1,  0,  0,  0,  1,  1,  0,  0,  0)
>   
>   #################################################################
>   # Gaussian Regression Interactive Multi-level Modeling (GRIMM) #
>   #################################################################
> 
>     ####################################################################################
>     # If we do not have any covariate and do not know a mean of the prior distribution #
>     ####################################################################################
> 
>     g <- gbp(y, se)
> 
>     ### when we want to simulate pseudo datasets considering the estimated values 
>     ### as true ones.
>     gcv <- coverage(g, nsim = 10)  
> 
>     ### gcv$coverageRB, gcv$coverage10, gcv$average.coverageRB, gcv$average.coverage10,
>     ### gcv$minimum.coverageRB, gcv$minimum.coverage10, gcv$raw.resultRB, gcv$raw.result10.
> 
>     ### when we want to simulate pseudo datasets based on different values of A and 
>     ### of a regression coefficient (intercept), 
>     ### not using estimated values as true ones.
>     gcv <- coverage(g, A.or.r = 9, reg.coef = 10, nsim = 10)  
> 
>     ##################################################################################
>     # If we have one covariate and do not know a mean of the prior distribution yet, #
>     ##################################################################################
> 
>     g <- gbp(y, se, x2, model = "gr")
>  
>     ### when we want to simulate pseudo datasets considering the estimated values 
>     ### as true ones.
>     gcv <- coverage(g, nsim = 10)  
>  
>     ### gcv$coverageRB, gcv$coverage10, gcv$average.coverageRB, gcv$average.coverage10,
>     ### gcv$minimum.coverageRB, gcv$minimum.coverage10, gcv$raw.resultRB, gcv$raw.result10.
> 
>     ### when we want to simulate pseudo datasets based on different values of A,
>     ### of regression coefficients, and of covariate, not using estimated values 
>     ### as true ones. Two values of reg.coef are for beta0 and beta1
>     gcv <- coverage(g, A.or.r = 9, reg.coef = c(10, 1), covariates = x2, nsim = 10)  
> 
>     ################################################
>     # If we know a mean of the prior distribution, #
>     ################################################
> 
>     g <- gbp(y, se, mean.PriorDist = 8)
> 
>     ### when we want to simulate pseudo datasets considering the estimated values 
>     ### as true ones.
>     gcv <- coverage(g, nsim = 10)  
> 
>     ### gcv$coverageRB, gcv$coverage10, gcv$average.coverageRB, gcv$average.coverage10,
>     ### gcv$minimum.coverageRB, gcv$minimum.coverage10, gcv$raw.resultRB, gcv$raw.result10.
> 
>     ### when we want to simulate pseudo datasets based on different values of A and
>     ### of 2nd level mean as true ones, not using estimated values as true ones.
>     coverage(g, A.or.r = 9, mean.PriorDist = 5, nsim = 10)  
$coverageRB
[1] 1.000 0.998 0.999 0.998 0.997 0.923 0.998 0.999

$coverageU
[1] 1.0 0.9 1.0 1.0 1.0 1.0 1.0 1.0

$average.coverageRB
[1] 0.989

$average.coverageU
[1] 0.988

$raw.resultRB
          [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
[1,] 0.9999263 0.9999784 0.9999992 0.9998798 0.9997049 0.9998918 1.0000000
[2,] 0.9999999 0.9999938 0.9999723 0.9983170 0.9999999 0.9892392 0.9999994
[3,] 1.0000000 0.9999998 0.9889193 0.9999879 0.9967635 0.9999860 0.9999999
[4,] 0.9999999 0.9999994 0.9999996 0.9991515 0.9999993 0.9991418 0.9998190
[5,] 0.9995894 0.9887787 0.9853800 0.9999480 0.9999589 0.9999947 0.9999941
[6,] 0.9924135 0.9977277 0.9999992 0.9988575 0.9999505 0.9998792 0.2459135
[7,] 0.9993767 0.9999213 0.9999991 0.9999908 0.9999988 0.9999204 0.9999901
[8,] 0.9984157 0.9999999 0.9999945 0.9999993 0.9960455 1.0000000 0.9974160
          [,8]      [,9]     [,10]
[1,] 1.0000000 0.9999978 0.9999990
[2,] 0.9913679 0.9986467 0.9999989
[3,] 0.9999987 0.9999097 0.9999999
[4,] 0.9993726 0.9874191 0.9999984
[5,] 0.9999875 0.9999927 0.9985488
[6,] 0.9995729 0.9999992 0.9999289
[7,] 0.9998942 0.9845657 0.9999861
[8,] 1.0000000 1.0000000 0.9934484

$raw.resultU
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
[1,]    1    1    1    1    1    1    1    1    1     1
[2,]    1    1    1    1    1    0    1    1    1     1
[3,]    1    1    1    1    1    1    1    1    1     1
[4,]    1    1    1    1    1    1    1    1    1     1
[5,]    1    1    1    1    1    1    1    1    1     1
[6,]    1    1    1    1    1    1    1    1    1     1
[7,]    1    1    1    1    1    1    1    1    1     1
[8,]    1    1    1    1    1    1    1    1    1     1

> 
>   ################################################################
>   # Binomial Regression Interactive Multi-level Modeling (BRIMM) #
>   ################################################################
> 
>     ####################################################################################
>     # If we do not have any covariate and do not know a mean of the prior distribution #
>     ####################################################################################
> 
>     b <- gbp(z, n, model = "br")
> 
>     ### when we want to simulate pseudo datasets considering the estimated values 
>     ### as true ones.
>     bcv <- coverage(b, nsim = 10)  
> 
>     ### bcv$coverageRB, bcv$coverage10, bcv$average.coverageRB, bcv$average.coverage10,
>     ### bcv$minimum.coverageRB, bcv$minimum.coverage10, bcv$raw.resultRB, bcv$raw.result10.
> 
>     ### when we want to simulate pseudo datasets based on different values of r and 
>     ### of a regression coefficient (intercept), 
>     ### not using estimated values as true ones.
>     bcv <- coverage(b, A.or.r = 60, reg.coef = -1, nsim = 10)  
> 
>     ##################################################################################
>     # If we have one covariate and do not know a mean of the prior distribution yet, #
>     ##################################################################################
> 
>     b <- gbp(z, n, x1, model = "br")
> 
>     ### when we want to simulate pseudo datasets considering the estimated values 
>     ### as true ones.
>     bcv <- coverage(b, nsim = 10)  
> 
>     ### bcv$coverageRB, bcv$coverage10, bcv$average.coverageRB, bcv$average.coverage10,
>     ### bcv$minimum.coverageRB, bcv$minimum.coverage10, bcv$raw.resultRB, bcv$raw.result10.
> 
>     ### when we want to simulate pseudo datasets based on different values of r,
>     ### of regression coefficients, and of covariate, not using estimated values 
>     ### as true ones. Two values of reg.coef are for beta0 and beta1
>     bcv <- coverage(b, A.or.r = 60, reg.coef = c(-1, 0), covariates = x1, nsim = 10)  
> 
>     ################################################
>     # If we know a mean of the prior distribution, #
>     ################################################
> 
>     b <- gbp(z, n, mean.PriorDist = 0.265, model = "br")
> 
>     ### when we want to simulate pseudo datasets considering the estimated values 
>     ### as true ones.
>     bcv <- coverage(b, nsim = 10)  
> 
>     ### bcv$coverageRB, bcv$coverage10, bcv$average.coverageRB, bcv$average.coverage10,
>     ### bcv$minimum.coverageRB, bcv$minimum.coverage10, bcv$raw.resultRB, bcv$raw.result10.
> 
>     ### when we want to simulate pseudo datasets based on different values of r and
>     ### of 2nd level mean as true ones, not using estimated values as true ones.
>     bcv <- coverage(b, A.or.r = 60, mean.PriorDist = 0.3, nsim = 10)  
> 
>   ###############################################################
>   # Poisson Regression Interactive Multi-level Modeling (PRIMM) #
>   ###############################################################
> 
>     ####################################################################################
>     # If we do not have any covariate and do not know a mean of the prior distribution #
>     ####################################################################################
> 
>     p <- gbp(z, n, model = "pr")
> 
>     ### when we want to simulate pseudo datasets considering the estimated values 
>     ### as true ones.
>     pcv <- coverage(p, nsim = 10)  
> 
>     ### pcv$coverageRB, pcv$coverage10, pcv$average.coverageRB, pcv$average.coverage10,
>     ### pcv$minimum.coverageRB, pcv$minimum.coverage10, pcv$raw.resultRB, pcv$raw.result10.
> 
>     ### when we want to simulate pseudo datasets based on different values of r and 
>     ### of a regression coefficient (intercept), 
>     ### not using estimated values as true ones.
>     pcv <- coverage(p, A.or.r = 60, reg.coef = -5, nsim = 10)  
[1] "1"     "error"
[1] "2"     "error"
[1] "4"     "error"
[1] "6"     "error"
[1] "7"     "error"
[1] "9"     "error"
> 
>     ##################################################################################
>     # If we have one covariate and do not know a mean of the prior distribution yet, #
>     ##################################################################################
> 
>     p <- gbp(z, n, x1, model = "pr")
> 
>     ### when we want to simulate pseudo datasets considering the estimated values 
>     ### as true ones.
>     pcv <- coverage(p, nsim = 10)  
> 
>     ### pcv$coverageRB, pcv$coverage10, pcv$average.coverageRB, pcv$average.coverage10,
>     ### pcv$minimum.coverageRB, pcv$minimum.coverage10, pcv$raw.resultRB, pcv$raw.result10.
> 
>     ### when we want to simulate pseudo datasets based on different values of r,
>     ### of regression coefficients, and of covariate, not using estimated values 
>     ### as true ones. Two values of reg.coef are for beta0 and beta1
>     pcv <- coverage(p, A.or.r = 60, reg.coef = c(-2, 0), covariates = x1, nsim = 10)  
> 
>     ################################################
>     # If we know a mean of the prior distribution, #
>     ################################################
> 
>     p <- gbp(z, n, mean.PriorDist = 0.265, model = "pr")
> 
>     ### when we want to simulate pseudo datasets considering the estimated values 
>     ### as true ones.
>     pcv <- coverage(p, nsim = 10)  
> 
>     ### pcv$coverageRB, pcv$coverage10, pcv$average.coverageRB, pcv$average.coverage10,
>     ### pcv$minimum.coverageRB, pcv$minimum.coverage10, pcv$raw.resultRB, pcv$raw.result10.
> 
>     ### when we want to simulate pseudo datasets based on different values of r and
>     ### of 2nd level mean as true ones, not using estimated values as true ones.
>     pcv <- coverage(p, A.or.r = 60, mean.PriorDist = 0.3, nsim = 10)  
> 
> 
> 
> 
> cleanEx()
> nameEx("gbp.default")
> ### * gbp.default
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gbp
> ### Title: Fitting Bayesian Hierarchical Models
> ### Aliases: gbp gbp.default
> ### Keywords: methods
> 
> ### ** Examples
> 
> 
>   # Loading datasets
>   data(schools)
>   y <- schools$y
>   se <- schools$se
> 
>   # Arbitrary covariate for schools data
>   x2 <- rep(c(-1, 0, 1, 2), 2)
>   
>   # baseball data where z is Hits and n is AtBats
>   z <- c(18, 17, 16, 15, 14, 14, 13, 12, 11, 11, 10, 10, 10, 10, 10,  9,  8,  7)
>   n <- c(45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45)
> 
>   # One covariate: 1 if a player is an outfielder and 0 otherwise
>   x1 <- c(1,  1,  1,  1,  1,  0,  0,  0,  0,  1,  0,  0,  0,  1,  1,  0,  0,  0)
> 
>   ################################################################
>   # Gaussian Regression Interactive Multilevel Modeling (GRIMM) #
>   ################################################################
> 
>     ####################################################################################
>     # If we do not have any covariate and do not know a mean of the prior distribution #
>     ####################################################################################
> 
>     g <- gbp(y, se)
>     g
Summary for each unit (sorted by se): 

         obs.mean   se prior.mean shrinkage low.intv post.mean upp.intv post.sd
5           -1.00  9.0      8.168     0.408  -13.297     2.737   16.692   7.634
2            8.00 10.0      8.168     0.459   -7.255     8.077   23.361   7.810
7           18.00 10.0      8.168     0.459   -1.289    13.484   30.821   8.176
4            7.00 11.0      8.168     0.507   -8.780     7.592   23.602   8.257
6            1.00 11.0      8.168     0.507  -13.027     4.633   20.131   8.441
1           28.00 15.0      8.168     0.657   -2.315    14.979   38.763  10.560
3           -3.00 16.0      8.168     0.685  -17.130     4.650   22.477  10.096
8           12.00 18.0      8.168     0.734  -10.208     9.189   29.939  10.227
colMeans     8.75 12.5      8.168     0.552   -9.163     8.168   25.723   8.900
>     print(g, sort = FALSE)
Summary for each unit: 

         obs.mean   se prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           28.00 15.0      8.168     0.657   -2.315    14.979   38.763  10.560
2            8.00 10.0      8.168     0.459   -7.255     8.077   23.361   7.810
3           -3.00 16.0      8.168     0.685  -17.130     4.650   22.477  10.096
4            7.00 11.0      8.168     0.507   -8.780     7.592   23.602   8.257
5           -1.00  9.0      8.168     0.408  -13.297     2.737   16.692   7.634
6            1.00 11.0      8.168     0.507  -13.027     4.633   20.131   8.441
7           18.00 10.0      8.168     0.459   -1.289    13.484   30.821   8.176
8           12.00 18.0      8.168     0.734  -10.208     9.189   29.939  10.227
colMeans     8.75 12.5      8.168     0.552   -9.163     8.168   25.723   8.900
>     summary(g)
Main summary:

                    obs.mean   se prior.mean shrinkage low.intv post.mean
Unit w/ min(se)        -1.00  9.0      8.168     0.408  -13.297     2.737
Unit w/ median(se)1     1.00 11.0      8.168     0.507  -13.027     4.633
Unit w/ median(se)2     7.00 11.0      8.168     0.507   -8.780     7.592
Unit w/ max(se)        12.00 18.0      8.168     0.734  -10.208     9.189
Overall Mean            8.75 12.5      8.168     0.552   -9.163     8.168
                    upp.intv post.sd
Unit w/ min(se)       16.692   7.634
Unit w/ median(se)1   20.131   8.441
Unit w/ median(se)2   23.602   8.257
Unit w/ max(se)       29.939  10.227
Overall Mean          25.723   8.900


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1           4.768         1.139


Regression Summary:

      estimate   se z.val p.val
beta0    8.168 5.73 1.425 0.154
>     plot(g)
>     plot(g, sort = FALSE)
> 
>     ### when we want to simulate pseudo datasets considering the estimated values 
>     ### as true ones.
>     gcv <- coverage(g, nsim = 10)  
> 
>     ### gcv$coverageRB, gcv$coverage10, gcv$average.coverageRB, gcv$average.coverage10,
>     ### gcv$minimum.coverageRB, gcv$minimum.coverage10, gcv$raw.resultRB, gcv$raw.result10.
> 
>     ### when we want to simulate pseudo datasets based on different values of A and 
>     ### of a regression coefficient (intercept), 
>     ### not using estimated values as true ones.
>     gcv <- coverage(g, A.or.r = 9, reg.coef = 10, nsim = 10)  
> 
>     ##################################################################################
>     # If we have one covariate and do not know a mean of the prior distribution yet, #
>     ##################################################################################
> 
>     g <- gbp(y, se, x2, model = "gr")
>     g
Summary for each unit (sorted by se): 

         obs.mean   se   X1 prior.mean shrinkage low.intv post.mean upp.intv
5           -1.00  9.0 -1.0      8.073     0.333  -15.136     2.018   17.670
2            8.00 10.0  0.0      8.198     0.381   -8.151     8.076   24.255
7           18.00 10.0  1.0      8.324     0.381   -1.593    14.314   32.320
4            7.00 11.0  2.0      8.450     0.427  -11.295     7.619   26.198
6            1.00 11.0  0.0      8.198     0.427  -14.510     4.073   20.755
1           28.00 15.0 -1.0      8.073     0.581   -5.142    16.429   43.404
3           -3.00 16.0  1.0      8.324     0.612  -20.053     3.927   23.930
8           12.00 18.0  2.0      8.450     0.666  -14.829     9.636   35.154
colMeans     8.75 12.5  0.5      8.261     0.476  -11.339     8.261   27.961
         post.sd
5          8.353
2          8.267
7          8.633
4          9.562
6          8.978
1         12.387
3         11.204
8         12.739
colMeans  10.015
>     print(g, sort = FALSE)
Summary for each unit: 

         obs.mean   se   X1 prior.mean shrinkage low.intv post.mean upp.intv
1           28.00 15.0 -1.0      8.073     0.581   -5.142    16.429   43.404
2            8.00 10.0  0.0      8.198     0.381   -8.151     8.076   24.255
3           -3.00 16.0  1.0      8.324     0.612  -20.053     3.927   23.930
4            7.00 11.0  2.0      8.450     0.427  -11.295     7.619   26.198
5           -1.00  9.0 -1.0      8.073     0.333  -15.136     2.018   17.670
6            1.00 11.0  0.0      8.198     0.427  -14.510     4.073   20.755
7           18.00 10.0  1.0      8.324     0.381   -1.593    14.314   32.320
8           12.00 18.0  2.0      8.450     0.666  -14.829     9.636   35.154
colMeans     8.75 12.5  0.5      8.261     0.476  -11.339     8.261   27.961
         post.sd
1         12.387
2          8.267
3         11.204
4          9.562
5          8.353
6          8.978
7          8.633
8         12.739
colMeans  10.015
>     summary(g)
Main summary:

                    obs.mean   se   X1 prior.mean shrinkage low.intv post.mean
Unit w/ min(se)        -1.00  9.0 -1.0      8.073     0.333  -15.136     2.018
Unit w/ median(se)1     1.00 11.0  0.0      8.198     0.427  -14.510     4.073
Unit w/ median(se)2     7.00 11.0  2.0      8.450     0.427  -11.295     7.619
Unit w/ max(se)        12.00 18.0  2.0      8.450     0.666  -14.829     9.636
Overall Mean            8.75 12.5  0.5      8.261     0.476  -11.339     8.261
                    upp.intv post.sd
Unit w/ min(se)       17.670   8.353
Unit w/ median(se)1   20.755   8.978
Unit w/ median(se)2   26.198   9.562
Unit w/ max(se)       35.154  12.739
Overall Mean          27.961  10.015


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1           5.091         1.169


Regression Summary:

      estimate    se z.val p.val
beta0    8.198 6.656 1.232 0.218
beta1    0.126 5.698 0.022 0.982
>     plot(g)
>     plot(g, sort = FALSE)
> 
>     ### when we want to simulate pseudo datasets considering the estimated values 
>     ### as true ones.
>     gcv <- coverage(g, nsim = 10)  
>  
>     ### gcv$coverageRB, gcv$coverage10, gcv$average.coverageRB, gcv$average.coverage10,
>     ### gcv$minimum.coverageRB, gcv$minimum.coverage10, gcv$raw.resultRB, gcv$raw.result10.
> 
>     ### when we want to simulate pseudo datasets based on different values of A,
>     ### of regression coefficients, and of covariate, not using estimated values 
>     ### as true ones. Two values of reg.coef are for beta0 and beta1
>     gcv <- coverage(g, A.or.r = 9, reg.coef = c(10, 1), covariates = x2, nsim = 10)  
> 
>     ################################################
>     # If we know a mean of the prior distribution, #
>     ################################################
> 
>     g <- gbp(y, se, mean.PriorDist = 8)
>     g
Summary for each unit (sorted by se): 

         obs.mean   se prior.mean shrinkage low.intv post.mean upp.intv post.sd
5           -1.00  9.0          8     0.478  -11.516     3.303   15.419   6.866
2            8.00 10.0          8     0.531   -5.426     8.000   21.426   6.850
7           18.00 10.0          8     0.531    0.123    12.693   28.613   7.275
4            7.00 11.0          8     0.578   -6.642     7.578   21.407   7.151
6            1.00 11.0          8     0.578  -10.701     5.045   18.120   7.343
1           28.00 15.0          8     0.718    0.595    13.642   34.604   8.948
3           -3.00 16.0          8     0.743  -13.448     5.176   19.275   8.380
8           12.00 18.0          8     0.786   -6.767     8.858   26.078   8.363
colMeans     8.75 12.5          8     0.618   -6.723     8.037   23.118   7.647
>     print(g, sort = FALSE)
Summary for each unit: 

         obs.mean   se prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           28.00 15.0          8     0.718    0.595    13.642   34.604   8.948
2            8.00 10.0          8     0.531   -5.426     8.000   21.426   6.850
3           -3.00 16.0          8     0.743  -13.448     5.176   19.275   8.380
4            7.00 11.0          8     0.578   -6.642     7.578   21.407   7.151
5           -1.00  9.0          8     0.478  -11.516     3.303   15.419   6.866
6            1.00 11.0          8     0.578  -10.701     5.045   18.120   7.343
7           18.00 10.0          8     0.531    0.123    12.693   28.613   7.275
8           12.00 18.0          8     0.786   -6.767     8.858   26.078   8.363
colMeans     8.75 12.5          8     0.618   -6.723     8.037   23.118   7.647
>     summary(g)
Main summary:

                    obs.mean   se prior.mean shrinkage low.intv post.mean
Unit w/ min(se)        -1.00  9.0          8     0.478  -11.516     3.303
Unit w/ median(se)1     1.00 11.0          8     0.578  -10.701     5.045
Unit w/ median(se)2     7.00 11.0          8     0.578   -6.642     7.578
Unit w/ max(se)        12.00 18.0          8     0.786   -6.767     8.858
Overall Mean            8.75 12.5          8     0.618   -6.723     8.037
                    upp.intv post.sd
Unit w/ min(se)       15.419   6.866
Unit w/ median(se)1   18.120   7.343
Unit w/ median(se)2   21.407   7.151
Unit w/ max(se)       26.078   8.363
Overall Mean          23.118   7.647


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1           4.482         1.128
>     plot(g)
>     plot(g, sort = FALSE)
> 
>     ### when we want to simulate pseudo datasets considering the estimated values 
>     ### as true ones.
>     gcv <- coverage(g, nsim = 10)  
> 
>     ### gcv$coverageRB, gcv$coverage10, gcv$average.coverageRB, gcv$average.coverage10,
>     ### gcv$minimum.coverageRB, gcv$minimum.coverage10, gcv$raw.resultRB, gcv$raw.result10.
> 
>     ### when we want to simulate pseudo datasets based on different values of A and
>     ### of 2nd level mean as true ones, not using estimated values as true ones.
>     coverage(g, A.or.r = 9, mean.PriorDist = 5, nsim = 10)  
$coverageRB
[1] 1.000 0.998 0.999 0.998 0.997 0.923 0.998 0.999

$coverageU
[1] 1.0 0.9 1.0 1.0 1.0 1.0 1.0 1.0

$average.coverageRB
[1] 0.989

$average.coverageU
[1] 0.988

$raw.resultRB
          [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
[1,] 0.9999263 0.9999784 0.9999992 0.9998798 0.9997049 0.9998918 1.0000000
[2,] 0.9999999 0.9999938 0.9999723 0.9983170 0.9999999 0.9892392 0.9999994
[3,] 1.0000000 0.9999998 0.9889193 0.9999879 0.9967635 0.9999860 0.9999999
[4,] 0.9999999 0.9999994 0.9999996 0.9991515 0.9999993 0.9991418 0.9998190
[5,] 0.9995894 0.9887787 0.9853800 0.9999480 0.9999589 0.9999947 0.9999941
[6,] 0.9924135 0.9977277 0.9999992 0.9988575 0.9999505 0.9998792 0.2459135
[7,] 0.9993767 0.9999213 0.9999991 0.9999908 0.9999988 0.9999204 0.9999901
[8,] 0.9984157 0.9999999 0.9999945 0.9999993 0.9960455 1.0000000 0.9974160
          [,8]      [,9]     [,10]
[1,] 1.0000000 0.9999978 0.9999990
[2,] 0.9913679 0.9986467 0.9999989
[3,] 0.9999987 0.9999097 0.9999999
[4,] 0.9993726 0.9874191 0.9999984
[5,] 0.9999875 0.9999927 0.9985488
[6,] 0.9995729 0.9999992 0.9999289
[7,] 0.9998942 0.9845657 0.9999861
[8,] 1.0000000 1.0000000 0.9934484

$raw.resultU
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
[1,]    1    1    1    1    1    1    1    1    1     1
[2,]    1    1    1    1    1    0    1    1    1     1
[3,]    1    1    1    1    1    1    1    1    1     1
[4,]    1    1    1    1    1    1    1    1    1     1
[5,]    1    1    1    1    1    1    1    1    1     1
[6,]    1    1    1    1    1    1    1    1    1     1
[7,]    1    1    1    1    1    1    1    1    1     1
[8,]    1    1    1    1    1    1    1    1    1     1

> 
>   ###############################################################
>   # Binomial Regression Interactive Multilevel Modeling (BRIMM) #
>   ###############################################################
> 
>     ####################################################################################
>     # If we do not have any covariate and do not know a mean of the prior distribution #
>     ####################################################################################
> 
>     b <- gbp(z, n, model = "br")
>     b
Summary for each unit (sorted by n): 

         obs.mean  n prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           0.400 45      0.267     0.622    0.222     0.317    0.421   0.051
2           0.378 45      0.267     0.622    0.218     0.309    0.408   0.049
3           0.356 45      0.267     0.622    0.213     0.300    0.396   0.047
4           0.333 45      0.267     0.622    0.207     0.292    0.385   0.045
5           0.311 45      0.267     0.622    0.202     0.284    0.374   0.044
6           0.311 45      0.267     0.622    0.202     0.284    0.374   0.044
7           0.289 45      0.267     0.622    0.195     0.275    0.363   0.043
8           0.267 45      0.267     0.622    0.188     0.267    0.354   0.042
9           0.244 45      0.267     0.622    0.180     0.258    0.345   0.042
10          0.244 45      0.267     0.622    0.180     0.258    0.345   0.042
11          0.222 45      0.267     0.622    0.172     0.250    0.337   0.042
12          0.222 45      0.267     0.622    0.172     0.250    0.337   0.042
13          0.222 45      0.267     0.622    0.172     0.250    0.337   0.042
14          0.222 45      0.267     0.622    0.172     0.250    0.337   0.042
15          0.222 45      0.267     0.622    0.172     0.250    0.337   0.042
16          0.200 45      0.267     0.622    0.163     0.242    0.330   0.043
17          0.178 45      0.267     0.622    0.154     0.233    0.323   0.043
18          0.156 45      0.267     0.622    0.144     0.225    0.318   0.044
colMeans    0.265 45      0.267     0.622    0.185     0.266    0.357   0.044
>     print(b, sort = FALSE)
Summary for each unit: 

         obs.mean  n prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           0.400 45      0.267     0.622    0.222     0.317    0.421   0.051
2           0.378 45      0.267     0.622    0.218     0.309    0.408   0.049
3           0.356 45      0.267     0.622    0.213     0.300    0.396   0.047
4           0.333 45      0.267     0.622    0.207     0.292    0.385   0.045
5           0.311 45      0.267     0.622    0.202     0.284    0.374   0.044
6           0.311 45      0.267     0.622    0.202     0.284    0.374   0.044
7           0.289 45      0.267     0.622    0.195     0.275    0.363   0.043
8           0.267 45      0.267     0.622    0.188     0.267    0.354   0.042
9           0.244 45      0.267     0.622    0.180     0.258    0.345   0.042
10          0.244 45      0.267     0.622    0.180     0.258    0.345   0.042
11          0.222 45      0.267     0.622    0.172     0.250    0.337   0.042
12          0.222 45      0.267     0.622    0.172     0.250    0.337   0.042
13          0.222 45      0.267     0.622    0.172     0.250    0.337   0.042
14          0.222 45      0.267     0.622    0.172     0.250    0.337   0.042
15          0.222 45      0.267     0.622    0.172     0.250    0.337   0.042
16          0.200 45      0.267     0.622    0.163     0.242    0.330   0.043
17          0.178 45      0.267     0.622    0.154     0.233    0.323   0.043
18          0.156 45      0.267     0.622    0.144     0.225    0.318   0.044
colMeans    0.265 45      0.267     0.622    0.185     0.266    0.357   0.044
>     summary(b)
Main summary:

                          obs.mean  n prior.mean shrinkage low.intv post.mean
Unit w/ min(obs.mean)        0.156 45      0.267     0.622    0.144     0.225
Unit w/ median(obs.mean)1    0.244 45      0.267     0.622    0.180     0.258
Unit w/ median(obs.mean)2    0.244 45      0.267     0.622    0.180     0.258
Unit w/ max(obs.mean)        0.400 45      0.267     0.622    0.222     0.317
Overall Mean                 0.265 45      0.267     0.622    0.185     0.266
                          upp.intv post.sd
Unit w/ min(obs.mean)        0.318   0.044
Unit w/ median(obs.mean)1    0.345   0.042
Unit w/ median(obs.mean)2    0.345   0.042
Unit w/ max(obs.mean)        0.421   0.051
Overall Mean                 0.357   0.044


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1          -4.305          0.82


Regression Summary:

      estimate  se   z.val p.val
beta0   -1.012 0.1 -10.153     0
>     plot(b)
>     plot(b, sort = FALSE)
> 
>     ### when we want to simulate pseudo datasets considering the estimated values 
>     ### as true ones.
>     bcv <- coverage(b, nsim = 10)  
> 
>     ### bcv$coverageRB, bcv$coverage10, bcv$average.coverageRB, bcv$average.coverage10,
>     ### bcv$minimum.coverageRB, bcv$minimum.coverage10, bcv$raw.resultRB, bcv$raw.result10.
> 
>     ### when we want to simulate pseudo datasets based on different values of r and 
>     ### of a regression coefficient (intercept), 
>     ### not using estimated values as true ones.
>     bcv <- coverage(b, A.or.r = 60, reg.coef = -1, nsim = 10)  
> 
>     ##################################################################################
>     # If we have one covariate and do not know a mean of the prior distribution yet, #
>     ##################################################################################
> 
>     b <- gbp(z, n, x1, model = "br")
>     b
Summary for each unit (sorted by n): 

         obs.mean  n   X1 prior.mean shrinkage low.intv post.mean upp.intv
1           0.400 45 1.00      0.310     0.715    0.248     0.335    0.429
2           0.378 45 1.00      0.310     0.715    0.244     0.329    0.420
3           0.356 45 1.00      0.310     0.715    0.240     0.323    0.411
4           0.333 45 1.00      0.310     0.715    0.236     0.316    0.403
5           0.311 45 1.00      0.310     0.715    0.230     0.310    0.396
6           0.311 45 0.00      0.233     0.715    0.179     0.256    0.341
7           0.289 45 0.00      0.233     0.715    0.175     0.249    0.331
8           0.267 45 0.00      0.233     0.715    0.171     0.243    0.323
9           0.244 45 0.00      0.233     0.715    0.166     0.237    0.315
10          0.244 45 1.00      0.310     0.715    0.210     0.291    0.379
11          0.222 45 0.00      0.233     0.715    0.161     0.230    0.308
12          0.222 45 0.00      0.233     0.715    0.161     0.230    0.308
13          0.222 45 0.00      0.233     0.715    0.161     0.230    0.308
14          0.222 45 1.00      0.310     0.715    0.202     0.285    0.375
15          0.222 45 1.00      0.310     0.715    0.202     0.285    0.375
16          0.200 45 0.00      0.233     0.715    0.155     0.224    0.302
17          0.178 45 0.00      0.233     0.715    0.148     0.218    0.297
18          0.156 45 0.00      0.233     0.715    0.140     0.211    0.292
colMeans    0.265 45 0.44      0.267     0.715    0.191     0.267    0.351
         post.sd
1          0.046
2          0.045
3          0.044
4          0.043
5          0.042
6          0.041
7          0.040
8          0.039
9          0.038
10         0.043
11         0.038
12         0.038
13         0.038
14         0.044
15         0.044
16         0.038
17         0.038
18         0.039
colMeans   0.041
>     print(b, sort = FALSE)
Summary for each unit: 

         obs.mean  n   X1 prior.mean shrinkage low.intv post.mean upp.intv
1           0.400 45 1.00      0.310     0.715    0.248     0.335    0.429
2           0.378 45 1.00      0.310     0.715    0.244     0.329    0.420
3           0.356 45 1.00      0.310     0.715    0.240     0.323    0.411
4           0.333 45 1.00      0.310     0.715    0.236     0.316    0.403
5           0.311 45 1.00      0.310     0.715    0.230     0.310    0.396
6           0.311 45 0.00      0.233     0.715    0.179     0.256    0.341
7           0.289 45 0.00      0.233     0.715    0.175     0.249    0.331
8           0.267 45 0.00      0.233     0.715    0.171     0.243    0.323
9           0.244 45 0.00      0.233     0.715    0.166     0.237    0.315
10          0.244 45 1.00      0.310     0.715    0.210     0.291    0.379
11          0.222 45 0.00      0.233     0.715    0.161     0.230    0.308
12          0.222 45 0.00      0.233     0.715    0.161     0.230    0.308
13          0.222 45 0.00      0.233     0.715    0.161     0.230    0.308
14          0.222 45 1.00      0.310     0.715    0.202     0.285    0.375
15          0.222 45 1.00      0.310     0.715    0.202     0.285    0.375
16          0.200 45 0.00      0.233     0.715    0.155     0.224    0.302
17          0.178 45 0.00      0.233     0.715    0.148     0.218    0.297
18          0.156 45 0.00      0.233     0.715    0.140     0.211    0.292
colMeans    0.265 45 0.44      0.267     0.715    0.191     0.267    0.351
         post.sd
1          0.046
2          0.045
3          0.044
4          0.043
5          0.042
6          0.041
7          0.040
8          0.039
9          0.038
10         0.043
11         0.038
12         0.038
13         0.038
14         0.044
15         0.044
16         0.038
17         0.038
18         0.039
colMeans   0.041
>     summary(b)
Main summary:

                          obs.mean  n    X1 prior.mean shrinkage low.intv
Unit w/ min(obs.mean)        0.156 45 0.000      0.233     0.715    0.140
Unit w/ median(obs.mean)1    0.244 45 0.000      0.233     0.715    0.166
Unit w/ median(obs.mean)2    0.244 45 1.000      0.310     0.715    0.210
Unit w/ max(obs.mean)        0.400 45 1.000      0.310     0.715    0.248
Overall Mean                 0.265 45 0.444      0.267     0.715    0.191
                          post.mean upp.intv post.sd
Unit w/ min(obs.mean)         0.211    0.292   0.039
Unit w/ median(obs.mean)1     0.237    0.315   0.038
Unit w/ median(obs.mean)2     0.291    0.379   0.043
Unit w/ max(obs.mean)         0.335    0.429   0.046
Overall Mean                  0.267    0.351   0.041


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1          -4.727         0.957


Regression Summary:

      estimate    se  z.val p.val
beta0   -1.194 0.131 -9.129 0.000
beta1    0.389 0.187  2.074 0.038
>     plot(b)
>     plot(b, sort = FALSE)
> 
>     ### when we want to simulate pseudo datasets considering the estimated values 
>     ### as true ones.
>     bcv <- coverage(b, nsim = 10)  
> 
>     ### bcv$coverageRB, bcv$coverage10, bcv$average.coverageRB, bcv$average.coverage10,
>     ### bcv$minimum.coverageRB, bcv$minimum.coverage10, bcv$raw.resultRB, bcv$raw.result10.
> 
>     ### when we want to simulate pseudo datasets based on different values of r,
>     ### of regression coefficients, and of covariate, not using estimated values 
>     ### as true ones. Two values of reg.coef are for beta0 and beta1
>     bcv <- coverage(b, A.or.r = 60, reg.coef = c(-1, 0), covariates = x1, nsim = 10)  
> 
>     ################################################
>     # If we know a mean of the prior distribution, #
>     ################################################
> 
>     b <- gbp(z, n, mean.PriorDist = 0.265, model = "br")
>     b
Summary for each unit (sorted by n): 

         obs.mean  n prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           0.400 45      0.265      0.65    0.230     0.312    0.401   0.044
2           0.378 45      0.265      0.65    0.224     0.304    0.391   0.043
3           0.356 45      0.265      0.65    0.218     0.297    0.382   0.042
4           0.333 45      0.265      0.65    0.212     0.289    0.372   0.041
5           0.311 45      0.265      0.65    0.206     0.281    0.363   0.040
6           0.311 45      0.265      0.65    0.206     0.281    0.363   0.040
7           0.289 45      0.265      0.65    0.200     0.273    0.354   0.039
8           0.267 45      0.265      0.65    0.193     0.266    0.345   0.039
9           0.244 45      0.265      0.65    0.186     0.258    0.337   0.039
10          0.244 45      0.265      0.65    0.186     0.258    0.337   0.039
11          0.222 45      0.265      0.65    0.179     0.250    0.329   0.038
12          0.222 45      0.265      0.65    0.179     0.250    0.329   0.038
13          0.222 45      0.265      0.65    0.179     0.250    0.329   0.038
14          0.222 45      0.265      0.65    0.179     0.250    0.329   0.038
15          0.222 45      0.265      0.65    0.179     0.250    0.329   0.038
16          0.200 45      0.265      0.65    0.172     0.242    0.321   0.038
17          0.178 45      0.265      0.65    0.164     0.234    0.313   0.038
18          0.156 45      0.265      0.65    0.156     0.227    0.306   0.038
colMeans    0.265 45      0.265      0.65    0.191     0.265    0.346   0.040
>     print(b, sort = FALSE)
Summary for each unit: 

         obs.mean  n prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           0.400 45      0.265      0.65    0.230     0.312    0.401   0.044
2           0.378 45      0.265      0.65    0.224     0.304    0.391   0.043
3           0.356 45      0.265      0.65    0.218     0.297    0.382   0.042
4           0.333 45      0.265      0.65    0.212     0.289    0.372   0.041
5           0.311 45      0.265      0.65    0.206     0.281    0.363   0.040
6           0.311 45      0.265      0.65    0.206     0.281    0.363   0.040
7           0.289 45      0.265      0.65    0.200     0.273    0.354   0.039
8           0.267 45      0.265      0.65    0.193     0.266    0.345   0.039
9           0.244 45      0.265      0.65    0.186     0.258    0.337   0.039
10          0.244 45      0.265      0.65    0.186     0.258    0.337   0.039
11          0.222 45      0.265      0.65    0.179     0.250    0.329   0.038
12          0.222 45      0.265      0.65    0.179     0.250    0.329   0.038
13          0.222 45      0.265      0.65    0.179     0.250    0.329   0.038
14          0.222 45      0.265      0.65    0.179     0.250    0.329   0.038
15          0.222 45      0.265      0.65    0.179     0.250    0.329   0.038
16          0.200 45      0.265      0.65    0.172     0.242    0.321   0.038
17          0.178 45      0.265      0.65    0.164     0.234    0.313   0.038
18          0.156 45      0.265      0.65    0.156     0.227    0.306   0.038
colMeans    0.265 45      0.265      0.65    0.191     0.265    0.346   0.040
>     summary(b)
Main summary:

                          obs.mean  n prior.mean shrinkage low.intv post.mean
Unit w/ min(obs.mean)        0.156 45      0.265      0.65    0.156     0.227
Unit w/ median(obs.mean)1    0.244 45      0.265      0.65    0.186     0.258
Unit w/ median(obs.mean)2    0.244 45      0.265      0.65    0.186     0.258
Unit w/ max(obs.mean)        0.400 45      0.265      0.65    0.230     0.312
Overall Mean                 0.265 45      0.265      0.65    0.191     0.265
                          upp.intv post.sd
Unit w/ min(obs.mean)        0.306   0.038
Unit w/ median(obs.mean)1    0.337   0.039
Unit w/ median(obs.mean)2    0.337   0.039
Unit w/ max(obs.mean)        0.401   0.044
Overall Mean                 0.346   0.040


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1          -4.425         0.837
>     plot(b)
>     plot(b, sort = FALSE)
> 
>     ### when we want to simulate pseudo datasets considering the estimated values 
>     ### as true ones.
>     bcv <- coverage(b, nsim = 10)  
> 
>     ### bcv$coverageRB, bcv$coverage10, bcv$average.coverageRB, bcv$average.coverage10,
>     ### bcv$minimum.coverageRB, bcv$minimum.coverage10, bcv$raw.resultRB, bcv$raw.result10.
> 
>     ### when we want to simulate pseudo datasets based on different values of r and
>     ### of 2nd level mean as true ones, not using estimated values as true ones.
>     bcv <- coverage(b, A.or.r = 60, mean.PriorDist = 0.3, nsim = 10)  
> 
>   ##############################################################
>   # Poisson Regression Interactive Multilevel Modeling (PRIMM) #
>   ##############################################################
> 
>     ####################################################################################
>     # If we do not have any covariate and do not know a mean of the prior distribution #
>     ####################################################################################
> 
>     p <- gbp(z, n, model = "pr")
>     p
Summary for each unit (sorted by n): 

         obs.mean  n prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           0.400 45      0.268     0.717    0.211     0.305    0.418   0.053
2           0.378 45      0.268     0.717    0.208     0.299    0.407   0.051
3           0.356 45      0.268     0.717    0.205     0.293    0.396   0.049
4           0.333 45      0.268     0.717    0.202     0.287    0.386   0.047
5           0.311 45      0.268     0.717    0.198     0.280    0.377   0.046
6           0.311 45      0.268     0.717    0.198     0.280    0.377   0.046
7           0.289 45      0.268     0.717    0.194     0.274    0.368   0.045
8           0.267 45      0.268     0.717    0.189     0.268    0.361   0.044
9           0.244 45      0.268     0.717    0.183     0.262    0.353   0.044
10          0.244 45      0.268     0.717    0.183     0.262    0.353   0.044
11          0.222 45      0.268     0.717    0.177     0.255    0.347   0.043
12          0.222 45      0.268     0.717    0.177     0.255    0.347   0.043
13          0.222 45      0.268     0.717    0.177     0.255    0.347   0.043
14          0.222 45      0.268     0.717    0.177     0.255    0.347   0.043
15          0.222 45      0.268     0.717    0.177     0.255    0.347   0.043
16          0.200 45      0.268     0.717    0.171     0.249    0.342   0.044
17          0.178 45      0.268     0.717    0.164     0.243    0.337   0.044
18          0.156 45      0.268     0.717    0.156     0.236    0.333   0.045
colMeans    0.265 45      0.268     0.717    0.186     0.267    0.364   0.045
>     print(p, sort = FALSE)
Summary for each unit: 

         obs.mean  n prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           0.400 45      0.268     0.717    0.211     0.305    0.418   0.053
2           0.378 45      0.268     0.717    0.208     0.299    0.407   0.051
3           0.356 45      0.268     0.717    0.205     0.293    0.396   0.049
4           0.333 45      0.268     0.717    0.202     0.287    0.386   0.047
5           0.311 45      0.268     0.717    0.198     0.280    0.377   0.046
6           0.311 45      0.268     0.717    0.198     0.280    0.377   0.046
7           0.289 45      0.268     0.717    0.194     0.274    0.368   0.045
8           0.267 45      0.268     0.717    0.189     0.268    0.361   0.044
9           0.244 45      0.268     0.717    0.183     0.262    0.353   0.044
10          0.244 45      0.268     0.717    0.183     0.262    0.353   0.044
11          0.222 45      0.268     0.717    0.177     0.255    0.347   0.043
12          0.222 45      0.268     0.717    0.177     0.255    0.347   0.043
13          0.222 45      0.268     0.717    0.177     0.255    0.347   0.043
14          0.222 45      0.268     0.717    0.177     0.255    0.347   0.043
15          0.222 45      0.268     0.717    0.177     0.255    0.347   0.043
16          0.200 45      0.268     0.717    0.171     0.249    0.342   0.044
17          0.178 45      0.268     0.717    0.164     0.243    0.337   0.044
18          0.156 45      0.268     0.717    0.156     0.236    0.333   0.045
colMeans    0.265 45      0.268     0.717    0.186     0.267    0.364   0.045
>     summary(p)
Main summary:

                          obs.mean  n prior.mean shrinkage low.intv post.mean
Unit w/ min(obs.mean)        0.156 45      0.268     0.717    0.156     0.236
Unit w/ median(obs.mean)1    0.244 45      0.268     0.717    0.183     0.262
Unit w/ median(obs.mean)2    0.244 45      0.268     0.717    0.183     0.262
Unit w/ max(obs.mean)        0.400 45      0.268     0.717    0.211     0.305
Overall Mean                 0.265 45      0.268     0.717    0.186     0.267
                          upp.intv post.sd
Unit w/ min(obs.mean)        0.333   0.045
Unit w/ median(obs.mean)1    0.353   0.044
Unit w/ median(obs.mean)2    0.353   0.044
Unit w/ max(obs.mean)        0.418   0.053
Overall Mean                 0.364   0.045


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1          -4.738         0.945


Regression Summary:

      estimate   se   z.val p.val
beta0   -1.319 0.08 -16.522     0
>     plot(p)
>     plot(p, sort = FALSE)
> 
>     ### when we want to simulate pseudo datasets considering the estimated values 
>     ### as true ones.
>     pcv <- coverage(p, nsim = 10)  
> 
>     ### pcv$coverageRB, pcv$coverage10, pcv$average.coverageRB, pcv$average.coverage10,
>     ### pcv$minimum.coverageRB, pcv$minimum.coverage10, pcv$raw.resultRB, pcv$raw.result10.
> 
>     ### when we want to simulate pseudo datasets based on different values of r and 
>     ### of a regression coefficient (intercept), 
>     ### not using estimated values as true ones.
>     pcv <- coverage(p, A.or.r = 60, reg.coef = -5, nsim = 10)  
[1] "1"     "error"
[1] "2"     "error"
[1] "4"     "error"
[1] "6"     "error"
[1] "7"     "error"
[1] "9"     "error"
> 
>     ##################################################################################
>     # If we have one covariate and do not know a mean of the prior distribution yet, #
>     ##################################################################################
> 
>     p <- gbp(z, n, x1, model = "pr")
>     p
Summary for each unit (sorted by n): 

         obs.mean  n   X1 prior.mean shrinkage low.intv post.mean upp.intv
1           0.400 45 1.00      0.312     0.776    0.239     0.331    0.439
2           0.378 45 1.00      0.312     0.776    0.236     0.327    0.431
3           0.356 45 1.00      0.312     0.776    0.233     0.322    0.424
4           0.333 45 1.00      0.312     0.776    0.229     0.317    0.417
5           0.311 45 1.00      0.312     0.776    0.226     0.312    0.411
6           0.311 45 0.00      0.235     0.776    0.174     0.252    0.344
7           0.289 45 0.00      0.235     0.776    0.172     0.247    0.336
8           0.267 45 0.00      0.235     0.776    0.168     0.242    0.328
9           0.244 45 0.00      0.235     0.776    0.165     0.237    0.322
10          0.244 45 1.00      0.312     0.776    0.211     0.297    0.397
11          0.222 45 0.00      0.235     0.776    0.161     0.232    0.316
12          0.222 45 0.00      0.235     0.776    0.161     0.232    0.316
13          0.222 45 0.00      0.235     0.776    0.161     0.232    0.316
14          0.222 45 1.00      0.312     0.776    0.205     0.292    0.393
15          0.222 45 1.00      0.312     0.776    0.205     0.292    0.393
16          0.200 45 0.00      0.235     0.776    0.156     0.227    0.311
17          0.178 45 0.00      0.235     0.776    0.151     0.222    0.306
18          0.156 45 0.00      0.235     0.776    0.145     0.217    0.303
colMeans    0.265 45 0.44      0.269     0.776    0.189     0.268    0.361
         post.sd
1          0.051
2          0.050
3          0.049
4          0.048
5          0.048
6          0.043
7          0.042
8          0.041
9          0.040
10         0.048
11         0.040
12         0.040
13         0.040
14         0.048
15         0.048
16         0.040
17         0.040
18         0.040
colMeans   0.044
>     print(p, sort = FALSE)
Summary for each unit: 

         obs.mean  n   X1 prior.mean shrinkage low.intv post.mean upp.intv
1           0.400 45 1.00      0.312     0.776    0.239     0.331    0.439
2           0.378 45 1.00      0.312     0.776    0.236     0.327    0.431
3           0.356 45 1.00      0.312     0.776    0.233     0.322    0.424
4           0.333 45 1.00      0.312     0.776    0.229     0.317    0.417
5           0.311 45 1.00      0.312     0.776    0.226     0.312    0.411
6           0.311 45 0.00      0.235     0.776    0.174     0.252    0.344
7           0.289 45 0.00      0.235     0.776    0.172     0.247    0.336
8           0.267 45 0.00      0.235     0.776    0.168     0.242    0.328
9           0.244 45 0.00      0.235     0.776    0.165     0.237    0.322
10          0.244 45 1.00      0.312     0.776    0.211     0.297    0.397
11          0.222 45 0.00      0.235     0.776    0.161     0.232    0.316
12          0.222 45 0.00      0.235     0.776    0.161     0.232    0.316
13          0.222 45 0.00      0.235     0.776    0.161     0.232    0.316
14          0.222 45 1.00      0.312     0.776    0.205     0.292    0.393
15          0.222 45 1.00      0.312     0.776    0.205     0.292    0.393
16          0.200 45 0.00      0.235     0.776    0.156     0.227    0.311
17          0.178 45 0.00      0.235     0.776    0.151     0.222    0.306
18          0.156 45 0.00      0.235     0.776    0.145     0.217    0.303
colMeans    0.265 45 0.44      0.269     0.776    0.189     0.268    0.361
         post.sd
1          0.051
2          0.050
3          0.049
4          0.048
5          0.048
6          0.043
7          0.042
8          0.041
9          0.040
10         0.048
11         0.040
12         0.040
13         0.040
14         0.048
15         0.048
16         0.040
17         0.040
18         0.040
colMeans   0.044
>     summary(p)
Main summary:

                          obs.mean  n    X1 prior.mean shrinkage low.intv
Unit w/ min(obs.mean)        0.156 45 0.000      0.235     0.776    0.145
Unit w/ median(obs.mean)1    0.244 45 0.000      0.235     0.776    0.165
Unit w/ median(obs.mean)2    0.244 45 1.000      0.312     0.776    0.211
Unit w/ max(obs.mean)        0.400 45 1.000      0.312     0.776    0.239
Overall Mean                 0.265 45 0.444      0.269     0.776    0.189
                          post.mean upp.intv post.sd
Unit w/ min(obs.mean)         0.217    0.303   0.040
Unit w/ median(obs.mean)1     0.237    0.322   0.040
Unit w/ median(obs.mean)2     0.297    0.397   0.048
Unit w/ max(obs.mean)         0.331    0.439   0.051
Overall Mean                  0.268    0.361   0.044


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1          -5.049         1.024


Regression Summary:

      estimate    se   z.val p.val
beta0   -1.455 0.110 -13.204 0.000
beta1    0.284 0.154   1.848 0.065
>     plot(p)
>     plot(p, sort = FALSE)
> 
>     ### when we want to simulate pseudo datasets considering the estimated values 
>     ### as true ones.
>     pcv <- coverage(p, nsim = 10)  
> 
>     ### pcv$coverageRB, pcv$coverage10, pcv$average.coverageRB, pcv$average.coverage10,
>     ### pcv$minimum.coverageRB, pcv$minimum.coverage10, pcv$raw.resultRB, pcv$raw.result10.
> 
>     ### when we want to simulate pseudo datasets based on different values of r,
>     ### of regression coefficients, and of covariate, not using estimated values 
>     ### as true ones. Two values of reg.coef are for beta0 and beta1
>     pcv <- coverage(p, A.or.r = 60, reg.coef = c(-2, 0), covariates = x1, nsim = 10)  
> 
>     ################################################
>     # If we know a mean of the prior distribution, #
>     ################################################
> 
>     p <- gbp(z, n, mean.PriorDist = 0.265, model = "pr")
>     p
Summary for each unit (sorted by n): 

         obs.mean  n prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           0.400 45      0.265     0.741    0.213     0.300    0.402   0.048
2           0.378 45      0.265     0.741    0.211     0.294    0.391   0.046
3           0.356 45      0.265     0.741    0.208     0.288    0.381   0.044
4           0.333 45      0.265     0.741    0.206     0.283    0.372   0.042
5           0.311 45      0.265     0.741    0.202     0.277    0.363   0.041
6           0.311 45      0.265     0.741    0.202     0.277    0.363   0.041
7           0.289 45      0.265     0.741    0.199     0.271    0.355   0.040
8           0.267 45      0.265     0.741    0.194     0.265    0.347   0.039
9           0.244 45      0.265     0.741    0.190     0.260    0.341   0.039
10          0.244 45      0.265     0.741    0.190     0.260    0.341   0.039
11          0.222 45      0.265     0.741    0.184     0.254    0.335   0.039
12          0.222 45      0.265     0.741    0.184     0.254    0.335   0.039
13          0.222 45      0.265     0.741    0.184     0.254    0.335   0.039
14          0.222 45      0.265     0.741    0.184     0.254    0.335   0.039
15          0.222 45      0.265     0.741    0.184     0.254    0.335   0.039
16          0.200 45      0.265     0.741    0.178     0.248    0.330   0.039
17          0.178 45      0.265     0.741    0.171     0.242    0.326   0.039
18          0.156 45      0.265     0.741    0.164     0.237    0.322   0.040
colMeans    0.265 45      0.265     0.741    0.192     0.265    0.350   0.041
>     print(p, sort = FALSE)
Summary for each unit: 

         obs.mean  n prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           0.400 45      0.265     0.741    0.213     0.300    0.402   0.048
2           0.378 45      0.265     0.741    0.211     0.294    0.391   0.046
3           0.356 45      0.265     0.741    0.208     0.288    0.381   0.044
4           0.333 45      0.265     0.741    0.206     0.283    0.372   0.042
5           0.311 45      0.265     0.741    0.202     0.277    0.363   0.041
6           0.311 45      0.265     0.741    0.202     0.277    0.363   0.041
7           0.289 45      0.265     0.741    0.199     0.271    0.355   0.040
8           0.267 45      0.265     0.741    0.194     0.265    0.347   0.039
9           0.244 45      0.265     0.741    0.190     0.260    0.341   0.039
10          0.244 45      0.265     0.741    0.190     0.260    0.341   0.039
11          0.222 45      0.265     0.741    0.184     0.254    0.335   0.039
12          0.222 45      0.265     0.741    0.184     0.254    0.335   0.039
13          0.222 45      0.265     0.741    0.184     0.254    0.335   0.039
14          0.222 45      0.265     0.741    0.184     0.254    0.335   0.039
15          0.222 45      0.265     0.741    0.184     0.254    0.335   0.039
16          0.200 45      0.265     0.741    0.178     0.248    0.330   0.039
17          0.178 45      0.265     0.741    0.171     0.242    0.326   0.039
18          0.156 45      0.265     0.741    0.164     0.237    0.322   0.040
colMeans    0.265 45      0.265     0.741    0.192     0.265    0.350   0.041
>     summary(p)
Main summary:

                          obs.mean  n prior.mean shrinkage low.intv post.mean
Unit w/ min(obs.mean)        0.156 45      0.265     0.741    0.164     0.237
Unit w/ median(obs.mean)1    0.244 45      0.265     0.741    0.190     0.260
Unit w/ median(obs.mean)2    0.244 45      0.265     0.741    0.190     0.260
Unit w/ max(obs.mean)        0.400 45      0.265     0.741    0.213     0.300
Overall Mean                 0.265 45      0.265     0.741    0.192     0.265
                          upp.intv post.sd
Unit w/ min(obs.mean)        0.322   0.040
Unit w/ median(obs.mean)1    0.341   0.039
Unit w/ median(obs.mean)2    0.341   0.039
Unit w/ max(obs.mean)        0.402   0.048
Overall Mean                 0.350   0.041


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1          -4.859         0.955
>     plot(p)
>     plot(p, sort = FALSE)
> 
>     ### when we want to simulate pseudo datasets considering the estimated values 
>     ### as true ones.
>     pcv <- coverage(p, nsim = 10)  
> 
>     ### pcv$coverageRB, pcv$coverage10, pcv$average.coverageRB, pcv$average.coverage10,
>     ### pcv$minimum.coverageRB, pcv$minimum.coverage10, pcv$raw.resultRB, pcv$raw.result10.
> 
>     ### when we want to simulate pseudo datasets based on different values of r and
>     ### of 2nd level mean as true ones, not using estimated values as true ones.
>     pcv <- coverage(p, A.or.r = 60, mean.PriorDist = 0.3, nsim = 10)  
> 
> 
> 
> 
> cleanEx()
> nameEx("hospital")
> ### * hospital
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hospital
> ### Title: Thirty-one Hospital Data
> ### Aliases: hospital
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
>   data(hospital)
> 
>   z <- hospital$d
>   n <- hospital$n
>   y <- hospital$y
>   se <- hospital$se
>   
>   ###################################################################################
>   # We do not have any covariates and do not know a mean of the prior distribution. #
>   ###################################################################################
> 
>     ###############################################################
>     # Gaussian Regression Interactive Multilevel Modeling (GRIMM) #
>     ###############################################################
> 
>     g <- gbp(y, se)
>     g
Summary for each unit (sorted by se): 

         obs.mean  se prior.mean shrinkage low.intv post.mean upp.intv post.sd
31           1.14 0.6      0.018     0.352   -0.254     0.746    1.823   0.529
30          -0.21 0.7      0.018     0.381   -1.169    -0.123    0.903   0.529
29           0.96 0.7      0.018     0.436   -0.548     0.550    1.739   0.582
28           0.07 0.8      0.018     0.442   -1.068     0.047    1.168   0.570
27          -0.38 0.8      0.018     0.462   -1.367    -0.196    0.932   0.586
26          -2.42 0.8      0.018     0.499   -2.700    -1.204    0.073   0.706
25           1.10 0.9      0.018     0.533   -0.684     0.523    1.862   0.648
24           0.57 0.9      0.018     0.539   -0.942     0.273    1.558   0.637
22           0.61 0.9      0.018     0.550   -0.941     0.285    1.587   0.644
23           2.05 0.9      0.018     0.550   -0.336     0.933    2.430   0.704
21          -0.08 1.0      0.018     0.565   -1.301    -0.024    1.239   0.648
20           1.11 1.0      0.018     0.575   -0.768     0.482    1.874   0.673
19           0.01 1.0      0.018     0.590   -1.284     0.015    1.313   0.662
17          -0.34 1.0      0.018     0.595   -1.460    -0.127    1.157   0.667
18           0.86 1.0      0.018     0.595   -0.911     0.359    1.744   0.676
16          -2.15 1.0      0.018     0.599   -2.426    -0.850    0.463   0.736
15           0.08 1.0      0.018     0.604   -1.268     0.043    1.362   0.671
14           0.41 1.1      0.018     0.622   -1.146     0.166    1.534   0.683
13           0.00 1.1      0.018     0.631   -1.334     0.012    1.355   0.686
12           1.56 1.1      0.018     0.647   -0.759     0.562    2.093   0.726
11          -1.43 1.2      0.018     0.670   -2.000    -0.459    0.881   0.733
9           -0.14 1.2      0.018     0.677   -1.441    -0.033    1.353   0.713
10          -1.21 1.2      0.018     0.677   -1.897    -0.378    0.970   0.730
8            2.31 1.3      0.018     0.711   -0.703     0.681    2.368   0.783
7           -1.90 1.4      0.018     0.723   -2.158    -0.513    0.874   0.772
6           -1.97 1.4      0.018     0.726   -2.183    -0.527    0.863   0.776
5           -0.74 1.4      0.018     0.732   -1.704    -0.185    1.229   0.747
4           -1.87 1.4      0.018     0.740   -2.125    -0.473    0.927   0.777
3            0.58 1.6      0.018     0.777   -1.326     0.144    1.687   0.768
2           -0.22 2.8      0.018     0.915   -1.648    -0.002    1.628   0.836
1           -2.07 2.8      0.018     0.916   -1.883    -0.157    1.423   0.842
colMeans    -0.12 1.2      0.018     0.614   -1.346     0.018    1.368   0.692
>     print(g, sort = FALSE)
Summary for each unit: 

         obs.mean  se prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           -2.07 2.8      0.018     0.916   -1.883    -0.157    1.423   0.842
2           -0.22 2.8      0.018     0.915   -1.648    -0.002    1.628   0.836
3            0.58 1.6      0.018     0.777   -1.326     0.144    1.687   0.768
4           -1.87 1.4      0.018     0.740   -2.125    -0.473    0.927   0.777
5           -0.74 1.4      0.018     0.732   -1.704    -0.185    1.229   0.747
6           -1.97 1.4      0.018     0.726   -2.183    -0.527    0.863   0.776
7           -1.90 1.4      0.018     0.723   -2.158    -0.513    0.874   0.772
8            2.31 1.3      0.018     0.711   -0.703     0.681    2.368   0.783
9           -0.14 1.2      0.018     0.677   -1.441    -0.033    1.353   0.713
10          -1.21 1.2      0.018     0.677   -1.897    -0.378    0.970   0.730
11          -1.43 1.2      0.018     0.670   -2.000    -0.459    0.881   0.733
12           1.56 1.1      0.018     0.647   -0.759     0.562    2.093   0.726
13           0.00 1.1      0.018     0.631   -1.334     0.012    1.355   0.686
14           0.41 1.1      0.018     0.622   -1.146     0.166    1.534   0.683
15           0.08 1.0      0.018     0.604   -1.268     0.043    1.362   0.671
16          -2.15 1.0      0.018     0.599   -2.426    -0.850    0.463   0.736
17          -0.34 1.0      0.018     0.595   -1.460    -0.127    1.157   0.667
18           0.86 1.0      0.018     0.595   -0.911     0.359    1.744   0.676
19           0.01 1.0      0.018     0.590   -1.284     0.015    1.313   0.662
20           1.11 1.0      0.018     0.575   -0.768     0.482    1.874   0.673
21          -0.08 1.0      0.018     0.565   -1.301    -0.024    1.239   0.648
22           0.61 0.9      0.018     0.550   -0.941     0.285    1.587   0.644
23           2.05 0.9      0.018     0.550   -0.336     0.933    2.430   0.704
24           0.57 0.9      0.018     0.539   -0.942     0.273    1.558   0.637
25           1.10 0.9      0.018     0.533   -0.684     0.523    1.862   0.648
26          -2.42 0.8      0.018     0.499   -2.700    -1.204    0.073   0.706
27          -0.38 0.8      0.018     0.462   -1.367    -0.196    0.932   0.586
28           0.07 0.8      0.018     0.442   -1.068     0.047    1.168   0.570
29           0.96 0.7      0.018     0.436   -0.548     0.550    1.739   0.582
30          -0.21 0.7      0.018     0.381   -1.169    -0.123    0.903   0.529
31           1.14 0.6      0.018     0.352   -0.254     0.746    1.823   0.529
colMeans    -0.12 1.2      0.018     0.614   -1.346     0.018    1.368   0.692
>     summary(g)
Main summary:

                   obs.mean  se prior.mean shrinkage low.intv post.mean
Unit w/ min(se)        1.14 0.6      0.018     0.352   -0.254     0.746
Unit w/ median(se)    -2.15 1.0      0.018     0.599   -2.426    -0.850
Unit w/ max(se)       -2.07 2.8      0.018     0.916   -1.883    -0.157
Overall Mean          -0.12 1.2      0.018     0.614   -1.346     0.018
                   upp.intv post.sd
Unit w/ min(se)       1.823   0.529
Unit w/ median(se)    0.463   0.736
Unit w/ max(se)       1.423   0.842
Overall Mean          1.368   0.692


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1          -0.344          0.62


Regression Summary:

      estimate    se z.val p.val
beta0    0.018 0.243 0.076  0.94
>     plot(g)
>     plot(g, sort = FALSE)    
> 
>     ###############################################################
>     # Binomial Regression Interactive Multilevel Modeling (BRIMM) #
>     ###############################################################
> 
>     b <- gbp(z, n, model = "br")
>     b
Summary for each unit (sorted by n): 

         obs.mean    n prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           0.045   67      0.029     0.914    0.019     0.030    0.044   0.006
2           0.029   68      0.029     0.913    0.018     0.029    0.042   0.006
3           0.024  210      0.029     0.772    0.018     0.027    0.039   0.006
4           0.043  256      0.029     0.736    0.021     0.032    0.045   0.006
5           0.033  269      0.029     0.726    0.020     0.030    0.042   0.006
6           0.044  274      0.029     0.722    0.022     0.033    0.046   0.006
7           0.043  278      0.029     0.719    0.022     0.033    0.046   0.006
8           0.014  295      0.029     0.707    0.015     0.024    0.035   0.005
9           0.029  347      0.029     0.672    0.019     0.029    0.040   0.005
10          0.037  349      0.029     0.671    0.021     0.031    0.043   0.006
11          0.039  358      0.029     0.665    0.022     0.032    0.044   0.006
12          0.018  396      0.029     0.643    0.016     0.025    0.035   0.005
13          0.028  431      0.029     0.623    0.019     0.028    0.039   0.005
14          0.025  441      0.029     0.618    0.018     0.027    0.038   0.005
15          0.027  477      0.029     0.599    0.019     0.028    0.038   0.005
16          0.045  484      0.029     0.595    0.025     0.035    0.048   0.006
17          0.030  494      0.029     0.590    0.020     0.029    0.040   0.005
18          0.022  501      0.029     0.587    0.017     0.026    0.036   0.005
19          0.028  505      0.029     0.585    0.019     0.028    0.038   0.005
20          0.020  540      0.029     0.569    0.017     0.025    0.035   0.005
21          0.028  563      0.029     0.558    0.020     0.028    0.039   0.005
22          0.024  593      0.029     0.546    0.018     0.026    0.036   0.005
23          0.015  602      0.029     0.542    0.014     0.022    0.032   0.005
24          0.024  629      0.029     0.531    0.018     0.026    0.036   0.005
25          0.020  636      0.029     0.528    0.017     0.025    0.034   0.004
26          0.048  729      0.029     0.494    0.028     0.038    0.051   0.006
27          0.031  849      0.029     0.456    0.022     0.030    0.039   0.004
28          0.027  914      0.029     0.438    0.020     0.028    0.037   0.004
29          0.021  940      0.029     0.431    0.017     0.024    0.033   0.004
30          0.029 1193      0.029     0.374    0.022     0.029    0.037   0.004
31          0.020 1340      0.029     0.347    0.017     0.023    0.030   0.004
colMeans    0.029  517      0.029     0.609    0.019     0.028    0.039   0.005
>     print(b, sort = FALSE)
Summary for each unit: 

         obs.mean    n prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           0.045   67      0.029     0.914    0.019     0.030    0.044   0.006
2           0.029   68      0.029     0.913    0.018     0.029    0.042   0.006
3           0.024  210      0.029     0.772    0.018     0.027    0.039   0.006
4           0.043  256      0.029     0.736    0.021     0.032    0.045   0.006
5           0.033  269      0.029     0.726    0.020     0.030    0.042   0.006
6           0.044  274      0.029     0.722    0.022     0.033    0.046   0.006
7           0.043  278      0.029     0.719    0.022     0.033    0.046   0.006
8           0.014  295      0.029     0.707    0.015     0.024    0.035   0.005
9           0.029  347      0.029     0.672    0.019     0.029    0.040   0.005
10          0.037  349      0.029     0.671    0.021     0.031    0.043   0.006
11          0.039  358      0.029     0.665    0.022     0.032    0.044   0.006
12          0.018  396      0.029     0.643    0.016     0.025    0.035   0.005
13          0.028  431      0.029     0.623    0.019     0.028    0.039   0.005
14          0.025  441      0.029     0.618    0.018     0.027    0.038   0.005
15          0.027  477      0.029     0.599    0.019     0.028    0.038   0.005
16          0.045  484      0.029     0.595    0.025     0.035    0.048   0.006
17          0.030  494      0.029     0.590    0.020     0.029    0.040   0.005
18          0.022  501      0.029     0.587    0.017     0.026    0.036   0.005
19          0.028  505      0.029     0.585    0.019     0.028    0.038   0.005
20          0.020  540      0.029     0.569    0.017     0.025    0.035   0.005
21          0.028  563      0.029     0.558    0.020     0.028    0.039   0.005
22          0.024  593      0.029     0.546    0.018     0.026    0.036   0.005
23          0.015  602      0.029     0.542    0.014     0.022    0.032   0.005
24          0.024  629      0.029     0.531    0.018     0.026    0.036   0.005
25          0.020  636      0.029     0.528    0.017     0.025    0.034   0.004
26          0.048  729      0.029     0.494    0.028     0.038    0.051   0.006
27          0.031  849      0.029     0.456    0.022     0.030    0.039   0.004
28          0.027  914      0.029     0.438    0.020     0.028    0.037   0.004
29          0.021  940      0.029     0.431    0.017     0.024    0.033   0.004
30          0.029 1193      0.029     0.374    0.022     0.029    0.037   0.004
31          0.020 1340      0.029     0.347    0.017     0.023    0.030   0.004
colMeans    0.029  517      0.029     0.609    0.019     0.028    0.039   0.005
>     summary(b)
Main summary:

                  obs.mean    n prior.mean shrinkage low.intv post.mean
Unit w/ min(n)       0.045   67      0.029     0.914    0.019     0.030
Unit w/ median(n)    0.045  484      0.029     0.595    0.025     0.035
Unit w/ max(n)       0.020 1340      0.029     0.347    0.017     0.023
Overall Mean         0.029  517      0.029     0.609    0.019     0.028
                  upp.intv post.sd
Unit w/ min(n)       0.044   0.006
Unit w/ median(n)    0.048   0.006
Unit w/ max(n)       0.030   0.004
Overall Mean         0.039   0.005


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1          -6.568         0.606


Regression Summary:

      estimate    se   z.val p.val
beta0    -3.53 0.064 -55.225     0
>     plot(b)
>     plot(b, sort = FALSE)    
> 
>     ##############################################################
>     # Poisson Regression Interactive Multilevel Modeling (PRIMM) #
>     ##############################################################
> 
>     p <- gbp(z, n, model = "pr")
>     print(p, sort = FALSE)
Summary for each unit: 

         obs.mean    n prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           0.045   67      0.029     0.918    0.019     0.030    0.044   0.006
2           0.029   68      0.029     0.917    0.018     0.029    0.042   0.006
3           0.024  210      0.029     0.781    0.018     0.027    0.039   0.006
4           0.043  256      0.029     0.746    0.021     0.032    0.045   0.006
5           0.033  269      0.029     0.736    0.020     0.030    0.042   0.006
6           0.044  274      0.029     0.732    0.022     0.033    0.046   0.006
7           0.043  278      0.029     0.730    0.022     0.032    0.045   0.006
8           0.014  295      0.029     0.718    0.015     0.024    0.036   0.005
9           0.029  347      0.029     0.684    0.019     0.029    0.040   0.005
10          0.037  349      0.029     0.683    0.021     0.031    0.043   0.006
11          0.039  358      0.029     0.677    0.022     0.032    0.044   0.006
12          0.018  396      0.029     0.655    0.016     0.025    0.035   0.005
13          0.028  431      0.029     0.635    0.019     0.028    0.039   0.005
14          0.025  441      0.029     0.630    0.018     0.027    0.038   0.005
15          0.027  477      0.029     0.611    0.019     0.028    0.038   0.005
16          0.045  484      0.029     0.608    0.024     0.035    0.048   0.006
17          0.030  494      0.029     0.603    0.020     0.029    0.040   0.005
18          0.022  501      0.029     0.600    0.017     0.026    0.036   0.005
19          0.028  505      0.029     0.598    0.019     0.028    0.038   0.005
20          0.020  540      0.029     0.581    0.017     0.025    0.035   0.005
21          0.028  563      0.029     0.571    0.020     0.028    0.039   0.005
22          0.024  593      0.029     0.559    0.018     0.026    0.036   0.005
23          0.015  602      0.029     0.555    0.014     0.022    0.032   0.005
24          0.024  629      0.029     0.544    0.018     0.026    0.036   0.005
25          0.020  636      0.029     0.541    0.017     0.025    0.034   0.004
26          0.048  729      0.029     0.507    0.027     0.038    0.051   0.006
27          0.031  849      0.029     0.469    0.022     0.030    0.039   0.004
28          0.027  914      0.029     0.451    0.020     0.028    0.037   0.004
29          0.021  940      0.029     0.444    0.017     0.024    0.033   0.004
30          0.029 1193      0.029     0.386    0.022     0.029    0.037   0.004
31          0.020 1340      0.029     0.359    0.017     0.023    0.031   0.004
colMeans    0.029  517      0.029     0.620    0.019     0.028    0.039   0.005
>     p
Summary for each unit (sorted by n): 

         obs.mean    n prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           0.045   67      0.029     0.918    0.019     0.030    0.044   0.006
2           0.029   68      0.029     0.917    0.018     0.029    0.042   0.006
3           0.024  210      0.029     0.781    0.018     0.027    0.039   0.006
4           0.043  256      0.029     0.746    0.021     0.032    0.045   0.006
5           0.033  269      0.029     0.736    0.020     0.030    0.042   0.006
6           0.044  274      0.029     0.732    0.022     0.033    0.046   0.006
7           0.043  278      0.029     0.730    0.022     0.032    0.045   0.006
8           0.014  295      0.029     0.718    0.015     0.024    0.036   0.005
9           0.029  347      0.029     0.684    0.019     0.029    0.040   0.005
10          0.037  349      0.029     0.683    0.021     0.031    0.043   0.006
11          0.039  358      0.029     0.677    0.022     0.032    0.044   0.006
12          0.018  396      0.029     0.655    0.016     0.025    0.035   0.005
13          0.028  431      0.029     0.635    0.019     0.028    0.039   0.005
14          0.025  441      0.029     0.630    0.018     0.027    0.038   0.005
15          0.027  477      0.029     0.611    0.019     0.028    0.038   0.005
16          0.045  484      0.029     0.608    0.024     0.035    0.048   0.006
17          0.030  494      0.029     0.603    0.020     0.029    0.040   0.005
18          0.022  501      0.029     0.600    0.017     0.026    0.036   0.005
19          0.028  505      0.029     0.598    0.019     0.028    0.038   0.005
20          0.020  540      0.029     0.581    0.017     0.025    0.035   0.005
21          0.028  563      0.029     0.571    0.020     0.028    0.039   0.005
22          0.024  593      0.029     0.559    0.018     0.026    0.036   0.005
23          0.015  602      0.029     0.555    0.014     0.022    0.032   0.005
24          0.024  629      0.029     0.544    0.018     0.026    0.036   0.005
25          0.020  636      0.029     0.541    0.017     0.025    0.034   0.004
26          0.048  729      0.029     0.507    0.027     0.038    0.051   0.006
27          0.031  849      0.029     0.469    0.022     0.030    0.039   0.004
28          0.027  914      0.029     0.451    0.020     0.028    0.037   0.004
29          0.021  940      0.029     0.444    0.017     0.024    0.033   0.004
30          0.029 1193      0.029     0.386    0.022     0.029    0.037   0.004
31          0.020 1340      0.029     0.359    0.017     0.023    0.031   0.004
colMeans    0.029  517      0.029     0.620    0.019     0.028    0.039   0.005
>     summary(p)
Main summary:

                  obs.mean    n prior.mean shrinkage low.intv post.mean
Unit w/ min(n)       0.045   67      0.029     0.918    0.019     0.030
Unit w/ median(n)    0.045  484      0.029     0.608    0.024     0.035
Unit w/ max(n)       0.020 1340      0.029     0.359    0.017     0.023
Overall Mean         0.029  517      0.029     0.620    0.019     0.028
                  upp.intv post.sd
Unit w/ min(n)       0.044   0.006
Unit w/ median(n)    0.048   0.006
Unit w/ max(n)       0.031   0.004
Overall Mean         0.039   0.005


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1           -6.62          0.62


Regression Summary:

      estimate    se   z.val p.val
beta0   -3.559 0.062 -57.091     0
>     plot(p)
>     plot(p, sort = FALSE)    
> 
> 
> 
> 
> cleanEx()
> nameEx("plot.gbp")
> ### * plot.gbp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.gbp
> ### Title: Drawing Shrinkage and Posterior Interval Plots
> ### Aliases: plot.gbp
> ### Keywords: methods
> 
> ### ** Examples
> 
> 
>   data(hospital)
> 
>   z <- hospital$d
>   n <- hospital$n
>   y <- hospital$y
>   se <- hospital$se
>   
>   
>   ###################################################################################
>   # We do not have any covariates and do not know a mean of the prior distribution. #
>   ###################################################################################
> 
>     ###############################################################
>     # Gaussian Regression Interactive Multilevel Modeling (GRIMM) #
>     ###############################################################
> 
>     g <- gbp(y, se)
>     plot(g)
>     plot(g, sort = FALSE)
> 
>     ###############################################################
>     # Binomial Regression Interactive Multilevel Modeling (BRIMM) #
>     ###############################################################
> 
>     b <- gbp(z, n, model = "br")
>     plot(b)
>     plot(b, sort = FALSE)
> 
>     ##############################################################
>     # Poisson Regression Interactive Multilevel Modeling (PRIMM) #
>     ##############################################################
> 
>     p <- gbp(z, n, model = "pr")
>     plot(p)
>     plot(p, sort = FALSE)
> 
> 
> 
> 
> cleanEx()
> nameEx("print.gbp")
> ### * print.gbp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.gbp
> ### Title: Displaying 'gbp' Class
> ### Aliases: print.gbp
> ### Keywords: methods
> 
> ### ** Examples
> 
> 
>   data(hospital)
> 
>   z <- hospital$d
>   n <- hospital$n
>   y <- hospital$y
>   se <- hospital$se
>   
>   ###################################################################################
>   # We do not have any covariates and do not know a mean of the prior distribution. #
>   ###################################################################################
> 
>     ###############################################################
>     # Gaussian Regression Interactive Multilevel Modeling (GRIMM) #
>     ###############################################################
> 
>     g <- gbp(y, se)
>     g
Summary for each unit (sorted by se): 

         obs.mean  se prior.mean shrinkage low.intv post.mean upp.intv post.sd
31           1.14 0.6      0.018     0.352   -0.254     0.746    1.823   0.529
30          -0.21 0.7      0.018     0.381   -1.169    -0.123    0.903   0.529
29           0.96 0.7      0.018     0.436   -0.548     0.550    1.739   0.582
28           0.07 0.8      0.018     0.442   -1.068     0.047    1.168   0.570
27          -0.38 0.8      0.018     0.462   -1.367    -0.196    0.932   0.586
26          -2.42 0.8      0.018     0.499   -2.700    -1.204    0.073   0.706
25           1.10 0.9      0.018     0.533   -0.684     0.523    1.862   0.648
24           0.57 0.9      0.018     0.539   -0.942     0.273    1.558   0.637
22           0.61 0.9      0.018     0.550   -0.941     0.285    1.587   0.644
23           2.05 0.9      0.018     0.550   -0.336     0.933    2.430   0.704
21          -0.08 1.0      0.018     0.565   -1.301    -0.024    1.239   0.648
20           1.11 1.0      0.018     0.575   -0.768     0.482    1.874   0.673
19           0.01 1.0      0.018     0.590   -1.284     0.015    1.313   0.662
17          -0.34 1.0      0.018     0.595   -1.460    -0.127    1.157   0.667
18           0.86 1.0      0.018     0.595   -0.911     0.359    1.744   0.676
16          -2.15 1.0      0.018     0.599   -2.426    -0.850    0.463   0.736
15           0.08 1.0      0.018     0.604   -1.268     0.043    1.362   0.671
14           0.41 1.1      0.018     0.622   -1.146     0.166    1.534   0.683
13           0.00 1.1      0.018     0.631   -1.334     0.012    1.355   0.686
12           1.56 1.1      0.018     0.647   -0.759     0.562    2.093   0.726
11          -1.43 1.2      0.018     0.670   -2.000    -0.459    0.881   0.733
9           -0.14 1.2      0.018     0.677   -1.441    -0.033    1.353   0.713
10          -1.21 1.2      0.018     0.677   -1.897    -0.378    0.970   0.730
8            2.31 1.3      0.018     0.711   -0.703     0.681    2.368   0.783
7           -1.90 1.4      0.018     0.723   -2.158    -0.513    0.874   0.772
6           -1.97 1.4      0.018     0.726   -2.183    -0.527    0.863   0.776
5           -0.74 1.4      0.018     0.732   -1.704    -0.185    1.229   0.747
4           -1.87 1.4      0.018     0.740   -2.125    -0.473    0.927   0.777
3            0.58 1.6      0.018     0.777   -1.326     0.144    1.687   0.768
2           -0.22 2.8      0.018     0.915   -1.648    -0.002    1.628   0.836
1           -2.07 2.8      0.018     0.916   -1.883    -0.157    1.423   0.842
colMeans    -0.12 1.2      0.018     0.614   -1.346     0.018    1.368   0.692
>     print(g, sort = FALSE)
Summary for each unit: 

         obs.mean  se prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           -2.07 2.8      0.018     0.916   -1.883    -0.157    1.423   0.842
2           -0.22 2.8      0.018     0.915   -1.648    -0.002    1.628   0.836
3            0.58 1.6      0.018     0.777   -1.326     0.144    1.687   0.768
4           -1.87 1.4      0.018     0.740   -2.125    -0.473    0.927   0.777
5           -0.74 1.4      0.018     0.732   -1.704    -0.185    1.229   0.747
6           -1.97 1.4      0.018     0.726   -2.183    -0.527    0.863   0.776
7           -1.90 1.4      0.018     0.723   -2.158    -0.513    0.874   0.772
8            2.31 1.3      0.018     0.711   -0.703     0.681    2.368   0.783
9           -0.14 1.2      0.018     0.677   -1.441    -0.033    1.353   0.713
10          -1.21 1.2      0.018     0.677   -1.897    -0.378    0.970   0.730
11          -1.43 1.2      0.018     0.670   -2.000    -0.459    0.881   0.733
12           1.56 1.1      0.018     0.647   -0.759     0.562    2.093   0.726
13           0.00 1.1      0.018     0.631   -1.334     0.012    1.355   0.686
14           0.41 1.1      0.018     0.622   -1.146     0.166    1.534   0.683
15           0.08 1.0      0.018     0.604   -1.268     0.043    1.362   0.671
16          -2.15 1.0      0.018     0.599   -2.426    -0.850    0.463   0.736
17          -0.34 1.0      0.018     0.595   -1.460    -0.127    1.157   0.667
18           0.86 1.0      0.018     0.595   -0.911     0.359    1.744   0.676
19           0.01 1.0      0.018     0.590   -1.284     0.015    1.313   0.662
20           1.11 1.0      0.018     0.575   -0.768     0.482    1.874   0.673
21          -0.08 1.0      0.018     0.565   -1.301    -0.024    1.239   0.648
22           0.61 0.9      0.018     0.550   -0.941     0.285    1.587   0.644
23           2.05 0.9      0.018     0.550   -0.336     0.933    2.430   0.704
24           0.57 0.9      0.018     0.539   -0.942     0.273    1.558   0.637
25           1.10 0.9      0.018     0.533   -0.684     0.523    1.862   0.648
26          -2.42 0.8      0.018     0.499   -2.700    -1.204    0.073   0.706
27          -0.38 0.8      0.018     0.462   -1.367    -0.196    0.932   0.586
28           0.07 0.8      0.018     0.442   -1.068     0.047    1.168   0.570
29           0.96 0.7      0.018     0.436   -0.548     0.550    1.739   0.582
30          -0.21 0.7      0.018     0.381   -1.169    -0.123    0.903   0.529
31           1.14 0.6      0.018     0.352   -0.254     0.746    1.823   0.529
colMeans    -0.12 1.2      0.018     0.614   -1.346     0.018    1.368   0.692
> 
>     ###############################################################
>     # Binomial Regression Interactive Multilevel Modeling (BRIMM) #
>     ###############################################################
> 
>     b <- gbp(z, n, model = "br")
>     b
Summary for each unit (sorted by n): 

         obs.mean    n prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           0.045   67      0.029     0.914    0.019     0.030    0.044   0.006
2           0.029   68      0.029     0.913    0.018     0.029    0.042   0.006
3           0.024  210      0.029     0.772    0.018     0.027    0.039   0.006
4           0.043  256      0.029     0.736    0.021     0.032    0.045   0.006
5           0.033  269      0.029     0.726    0.020     0.030    0.042   0.006
6           0.044  274      0.029     0.722    0.022     0.033    0.046   0.006
7           0.043  278      0.029     0.719    0.022     0.033    0.046   0.006
8           0.014  295      0.029     0.707    0.015     0.024    0.035   0.005
9           0.029  347      0.029     0.672    0.019     0.029    0.040   0.005
10          0.037  349      0.029     0.671    0.021     0.031    0.043   0.006
11          0.039  358      0.029     0.665    0.022     0.032    0.044   0.006
12          0.018  396      0.029     0.643    0.016     0.025    0.035   0.005
13          0.028  431      0.029     0.623    0.019     0.028    0.039   0.005
14          0.025  441      0.029     0.618    0.018     0.027    0.038   0.005
15          0.027  477      0.029     0.599    0.019     0.028    0.038   0.005
16          0.045  484      0.029     0.595    0.025     0.035    0.048   0.006
17          0.030  494      0.029     0.590    0.020     0.029    0.040   0.005
18          0.022  501      0.029     0.587    0.017     0.026    0.036   0.005
19          0.028  505      0.029     0.585    0.019     0.028    0.038   0.005
20          0.020  540      0.029     0.569    0.017     0.025    0.035   0.005
21          0.028  563      0.029     0.558    0.020     0.028    0.039   0.005
22          0.024  593      0.029     0.546    0.018     0.026    0.036   0.005
23          0.015  602      0.029     0.542    0.014     0.022    0.032   0.005
24          0.024  629      0.029     0.531    0.018     0.026    0.036   0.005
25          0.020  636      0.029     0.528    0.017     0.025    0.034   0.004
26          0.048  729      0.029     0.494    0.028     0.038    0.051   0.006
27          0.031  849      0.029     0.456    0.022     0.030    0.039   0.004
28          0.027  914      0.029     0.438    0.020     0.028    0.037   0.004
29          0.021  940      0.029     0.431    0.017     0.024    0.033   0.004
30          0.029 1193      0.029     0.374    0.022     0.029    0.037   0.004
31          0.020 1340      0.029     0.347    0.017     0.023    0.030   0.004
colMeans    0.029  517      0.029     0.609    0.019     0.028    0.039   0.005
>     print(b, sort = FALSE)
Summary for each unit: 

         obs.mean    n prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           0.045   67      0.029     0.914    0.019     0.030    0.044   0.006
2           0.029   68      0.029     0.913    0.018     0.029    0.042   0.006
3           0.024  210      0.029     0.772    0.018     0.027    0.039   0.006
4           0.043  256      0.029     0.736    0.021     0.032    0.045   0.006
5           0.033  269      0.029     0.726    0.020     0.030    0.042   0.006
6           0.044  274      0.029     0.722    0.022     0.033    0.046   0.006
7           0.043  278      0.029     0.719    0.022     0.033    0.046   0.006
8           0.014  295      0.029     0.707    0.015     0.024    0.035   0.005
9           0.029  347      0.029     0.672    0.019     0.029    0.040   0.005
10          0.037  349      0.029     0.671    0.021     0.031    0.043   0.006
11          0.039  358      0.029     0.665    0.022     0.032    0.044   0.006
12          0.018  396      0.029     0.643    0.016     0.025    0.035   0.005
13          0.028  431      0.029     0.623    0.019     0.028    0.039   0.005
14          0.025  441      0.029     0.618    0.018     0.027    0.038   0.005
15          0.027  477      0.029     0.599    0.019     0.028    0.038   0.005
16          0.045  484      0.029     0.595    0.025     0.035    0.048   0.006
17          0.030  494      0.029     0.590    0.020     0.029    0.040   0.005
18          0.022  501      0.029     0.587    0.017     0.026    0.036   0.005
19          0.028  505      0.029     0.585    0.019     0.028    0.038   0.005
20          0.020  540      0.029     0.569    0.017     0.025    0.035   0.005
21          0.028  563      0.029     0.558    0.020     0.028    0.039   0.005
22          0.024  593      0.029     0.546    0.018     0.026    0.036   0.005
23          0.015  602      0.029     0.542    0.014     0.022    0.032   0.005
24          0.024  629      0.029     0.531    0.018     0.026    0.036   0.005
25          0.020  636      0.029     0.528    0.017     0.025    0.034   0.004
26          0.048  729      0.029     0.494    0.028     0.038    0.051   0.006
27          0.031  849      0.029     0.456    0.022     0.030    0.039   0.004
28          0.027  914      0.029     0.438    0.020     0.028    0.037   0.004
29          0.021  940      0.029     0.431    0.017     0.024    0.033   0.004
30          0.029 1193      0.029     0.374    0.022     0.029    0.037   0.004
31          0.020 1340      0.029     0.347    0.017     0.023    0.030   0.004
colMeans    0.029  517      0.029     0.609    0.019     0.028    0.039   0.005
> 
>     ##############################################################
>     # Poisson Regression Interactive Multilevel Modeling (PRIMM) #
>     ##############################################################
> 
>     p <- gbp(z, n, model = "pr")
>     p
Summary for each unit (sorted by n): 

         obs.mean    n prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           0.045   67      0.029     0.918    0.019     0.030    0.044   0.006
2           0.029   68      0.029     0.917    0.018     0.029    0.042   0.006
3           0.024  210      0.029     0.781    0.018     0.027    0.039   0.006
4           0.043  256      0.029     0.746    0.021     0.032    0.045   0.006
5           0.033  269      0.029     0.736    0.020     0.030    0.042   0.006
6           0.044  274      0.029     0.732    0.022     0.033    0.046   0.006
7           0.043  278      0.029     0.730    0.022     0.032    0.045   0.006
8           0.014  295      0.029     0.718    0.015     0.024    0.036   0.005
9           0.029  347      0.029     0.684    0.019     0.029    0.040   0.005
10          0.037  349      0.029     0.683    0.021     0.031    0.043   0.006
11          0.039  358      0.029     0.677    0.022     0.032    0.044   0.006
12          0.018  396      0.029     0.655    0.016     0.025    0.035   0.005
13          0.028  431      0.029     0.635    0.019     0.028    0.039   0.005
14          0.025  441      0.029     0.630    0.018     0.027    0.038   0.005
15          0.027  477      0.029     0.611    0.019     0.028    0.038   0.005
16          0.045  484      0.029     0.608    0.024     0.035    0.048   0.006
17          0.030  494      0.029     0.603    0.020     0.029    0.040   0.005
18          0.022  501      0.029     0.600    0.017     0.026    0.036   0.005
19          0.028  505      0.029     0.598    0.019     0.028    0.038   0.005
20          0.020  540      0.029     0.581    0.017     0.025    0.035   0.005
21          0.028  563      0.029     0.571    0.020     0.028    0.039   0.005
22          0.024  593      0.029     0.559    0.018     0.026    0.036   0.005
23          0.015  602      0.029     0.555    0.014     0.022    0.032   0.005
24          0.024  629      0.029     0.544    0.018     0.026    0.036   0.005
25          0.020  636      0.029     0.541    0.017     0.025    0.034   0.004
26          0.048  729      0.029     0.507    0.027     0.038    0.051   0.006
27          0.031  849      0.029     0.469    0.022     0.030    0.039   0.004
28          0.027  914      0.029     0.451    0.020     0.028    0.037   0.004
29          0.021  940      0.029     0.444    0.017     0.024    0.033   0.004
30          0.029 1193      0.029     0.386    0.022     0.029    0.037   0.004
31          0.020 1340      0.029     0.359    0.017     0.023    0.031   0.004
colMeans    0.029  517      0.029     0.620    0.019     0.028    0.039   0.005
>     print(p, sort = FALSE)
Summary for each unit: 

         obs.mean    n prior.mean shrinkage low.intv post.mean upp.intv post.sd
1           0.045   67      0.029     0.918    0.019     0.030    0.044   0.006
2           0.029   68      0.029     0.917    0.018     0.029    0.042   0.006
3           0.024  210      0.029     0.781    0.018     0.027    0.039   0.006
4           0.043  256      0.029     0.746    0.021     0.032    0.045   0.006
5           0.033  269      0.029     0.736    0.020     0.030    0.042   0.006
6           0.044  274      0.029     0.732    0.022     0.033    0.046   0.006
7           0.043  278      0.029     0.730    0.022     0.032    0.045   0.006
8           0.014  295      0.029     0.718    0.015     0.024    0.036   0.005
9           0.029  347      0.029     0.684    0.019     0.029    0.040   0.005
10          0.037  349      0.029     0.683    0.021     0.031    0.043   0.006
11          0.039  358      0.029     0.677    0.022     0.032    0.044   0.006
12          0.018  396      0.029     0.655    0.016     0.025    0.035   0.005
13          0.028  431      0.029     0.635    0.019     0.028    0.039   0.005
14          0.025  441      0.029     0.630    0.018     0.027    0.038   0.005
15          0.027  477      0.029     0.611    0.019     0.028    0.038   0.005
16          0.045  484      0.029     0.608    0.024     0.035    0.048   0.006
17          0.030  494      0.029     0.603    0.020     0.029    0.040   0.005
18          0.022  501      0.029     0.600    0.017     0.026    0.036   0.005
19          0.028  505      0.029     0.598    0.019     0.028    0.038   0.005
20          0.020  540      0.029     0.581    0.017     0.025    0.035   0.005
21          0.028  563      0.029     0.571    0.020     0.028    0.039   0.005
22          0.024  593      0.029     0.559    0.018     0.026    0.036   0.005
23          0.015  602      0.029     0.555    0.014     0.022    0.032   0.005
24          0.024  629      0.029     0.544    0.018     0.026    0.036   0.005
25          0.020  636      0.029     0.541    0.017     0.025    0.034   0.004
26          0.048  729      0.029     0.507    0.027     0.038    0.051   0.006
27          0.031  849      0.029     0.469    0.022     0.030    0.039   0.004
28          0.027  914      0.029     0.451    0.020     0.028    0.037   0.004
29          0.021  940      0.029     0.444    0.017     0.024    0.033   0.004
30          0.029 1193      0.029     0.386    0.022     0.029    0.037   0.004
31          0.020 1340      0.029     0.359    0.017     0.023    0.031   0.004
colMeans    0.029  517      0.029     0.620    0.019     0.028    0.039   0.005
> 
> 
> 
> 
> cleanEx()
> nameEx("print.summary.gbp")
> ### * print.summary.gbp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.summary.gbp
> ### Title: Displaying 'summary.gbp' Class
> ### Aliases: print.summary.gbp
> ### Keywords: methods
> 
> ### ** Examples
> 
> 
>   data(hospital)
> 
>   z <- hospital$d
>   n <- hospital$n
>   y <- hospital$y
>   se <- hospital$se
>   
>   ###################################################################################
>   # We do not have any covariates and do not know a mean of the prior distribution. #
>   ###################################################################################
> 
>     ###############################################################
>     # Gaussian Regression Interactive Multilevel Modeling (GRIMM) #
>     ###############################################################
> 
>     g <- gbp(y, se)
>     summary(g)
Main summary:

                   obs.mean  se prior.mean shrinkage low.intv post.mean
Unit w/ min(se)        1.14 0.6      0.018     0.352   -0.254     0.746
Unit w/ median(se)    -2.15 1.0      0.018     0.599   -2.426    -0.850
Unit w/ max(se)       -2.07 2.8      0.018     0.916   -1.883    -0.157
Overall Mean          -0.12 1.2      0.018     0.614   -1.346     0.018
                   upp.intv post.sd
Unit w/ min(se)       1.823   0.529
Unit w/ median(se)    0.463   0.736
Unit w/ max(se)       1.423   0.842
Overall Mean          1.368   0.692


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1          -0.344          0.62


Regression Summary:

      estimate    se z.val p.val
beta0    0.018 0.243 0.076  0.94
> 
>     ###############################################################
>     # Binomial Regression Interactive Multilevel Modeling (BRIMM) #
>     ###############################################################
> 
>     b <- gbp(z, n, model = "br")
>     summary(b)
Main summary:

                  obs.mean    n prior.mean shrinkage low.intv post.mean
Unit w/ min(n)       0.045   67      0.029     0.914    0.019     0.030
Unit w/ median(n)    0.045  484      0.029     0.595    0.025     0.035
Unit w/ max(n)       0.020 1340      0.029     0.347    0.017     0.023
Overall Mean         0.029  517      0.029     0.609    0.019     0.028
                  upp.intv post.sd
Unit w/ min(n)       0.044   0.006
Unit w/ median(n)    0.048   0.006
Unit w/ max(n)       0.030   0.004
Overall Mean         0.039   0.005


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1          -6.568         0.606


Regression Summary:

      estimate    se   z.val p.val
beta0    -3.53 0.064 -55.225     0
> 
>     ##############################################################
>     # Poisson Regression Interactive Multilevel Modeling (PRIMM) #
>     ##############################################################
> 
>     p <- gbp(z, n, model = "pr")
>     summary(p)
Main summary:

                  obs.mean    n prior.mean shrinkage low.intv post.mean
Unit w/ min(n)       0.045   67      0.029     0.918    0.019     0.030
Unit w/ median(n)    0.045  484      0.029     0.608    0.024     0.035
Unit w/ max(n)       0.020 1340      0.029     0.359    0.017     0.023
Overall Mean         0.029  517      0.029     0.620    0.019     0.028
                  upp.intv post.sd
Unit w/ min(n)       0.044   0.006
Unit w/ median(n)    0.048   0.006
Unit w/ max(n)       0.031   0.004
Overall Mean         0.039   0.005


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1           -6.62          0.62


Regression Summary:

      estimate    se   z.val p.val
beta0   -3.559 0.062 -57.091     0
> 
> 
> 
> 
> cleanEx()
> nameEx("schools")
> ### * schools
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: schools
> ### Title: Eight Schools Data
> ### Aliases: schools
> ### Keywords: datasets
> 
> ### ** Examples
> 
>   data(schools)
>   y <- schools$y
>   se <- schools$se
> 
>   ###################################################################################
>   # We do not have any covariates and do not know a mean of the prior distribution. #
>   ###################################################################################
> 
>   ###############################################################
>   # Gaussian Regression Interactive Multilevel Modeling (GRIMM) #
>   ###############################################################
> 
>   g <- gbp(y, se)
>   g
Summary for each unit (sorted by se): 

         obs.mean   se prior.mean shrinkage low.intv post.mean upp.intv post.sd
5           -1.00  9.0      8.168     0.408  -13.297     2.737   16.692   7.634
2            8.00 10.0      8.168     0.459   -7.255     8.077   23.361   7.810
7           18.00 10.0      8.168     0.459   -1.289    13.484   30.821   8.176
4            7.00 11.0      8.168     0.507   -8.780     7.592   23.602   8.257
6            1.00 11.0      8.168     0.507  -13.027     4.633   20.131   8.441
1           28.00 15.0      8.168     0.657   -2.315    14.979   38.763  10.560
3           -3.00 16.0      8.168     0.685  -17.130     4.650   22.477  10.096
8           12.00 18.0      8.168     0.734  -10.208     9.189   29.939  10.227
colMeans     8.75 12.5      8.168     0.552   -9.163     8.168   25.723   8.900
>   print(g, sort = TRUE)
Summary for each unit (sorted by se): 

         obs.mean   se prior.mean shrinkage low.intv post.mean upp.intv post.sd
5           -1.00  9.0      8.168     0.408  -13.297     2.737   16.692   7.634
2            8.00 10.0      8.168     0.459   -7.255     8.077   23.361   7.810
7           18.00 10.0      8.168     0.459   -1.289    13.484   30.821   8.176
4            7.00 11.0      8.168     0.507   -8.780     7.592   23.602   8.257
6            1.00 11.0      8.168     0.507  -13.027     4.633   20.131   8.441
1           28.00 15.0      8.168     0.657   -2.315    14.979   38.763  10.560
3           -3.00 16.0      8.168     0.685  -17.130     4.650   22.477  10.096
8           12.00 18.0      8.168     0.734  -10.208     9.189   29.939  10.227
colMeans     8.75 12.5      8.168     0.552   -9.163     8.168   25.723   8.900
>   summary(g)
Main summary:

                    obs.mean   se prior.mean shrinkage low.intv post.mean
Unit w/ min(se)        -1.00  9.0      8.168     0.408  -13.297     2.737
Unit w/ median(se)1     1.00 11.0      8.168     0.507  -13.027     4.633
Unit w/ median(se)2     7.00 11.0      8.168     0.507   -8.780     7.592
Unit w/ max(se)        12.00 18.0      8.168     0.734  -10.208     9.189
Overall Mean            8.75 12.5      8.168     0.552   -9.163     8.168
                    upp.intv post.sd
Unit w/ min(se)       16.692   7.634
Unit w/ median(se)1   20.131   8.441
Unit w/ median(se)2   23.602   8.257
Unit w/ max(se)       29.939  10.227
Overall Mean          25.723   8.900


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1           4.768         1.139


Regression Summary:

      estimate   se z.val p.val
beta0    8.168 5.73 1.425 0.154
>   plot(g)
> 
> 
> 
> 
> cleanEx()
> nameEx("summary.gbp")
> ### * summary.gbp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.gbp
> ### Title: Summarizing Estimation Result
> ### Aliases: summary.gbp
> ### Keywords: method
> 
> ### ** Examples
> 
> 
>   data(hospital)
> 
>   z <- hospital$d
>   n <- hospital$n
>   y <- hospital$y
>   se <- hospital$se
>   
>   ###################################################################################
>   # We do not have any covariates and do not know a mean of the prior distribution. #
>   ###################################################################################
> 
>     ###############################################################
>     # Gaussian Regression Interactive Multilevel Modeling (GRIMM) #
>     ###############################################################
> 
>     g <- gbp(y, se)
>     summary(g)
Main summary:

                   obs.mean  se prior.mean shrinkage low.intv post.mean
Unit w/ min(se)        1.14 0.6      0.018     0.352   -0.254     0.746
Unit w/ median(se)    -2.15 1.0      0.018     0.599   -2.426    -0.850
Unit w/ max(se)       -2.07 2.8      0.018     0.916   -1.883    -0.157
Overall Mean          -0.12 1.2      0.018     0.614   -1.346     0.018
                   upp.intv post.sd
Unit w/ min(se)       1.823   0.529
Unit w/ median(se)    0.463   0.736
Unit w/ max(se)       1.423   0.842
Overall Mean          1.368   0.692


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1          -0.344          0.62


Regression Summary:

      estimate    se z.val p.val
beta0    0.018 0.243 0.076  0.94
> 
>     ###############################################################
>     # Binomial Regression Interactive Multilevel Modeling (BRIMM) #
>     ###############################################################
> 
>     b <- gbp(z, n, model = "br")
>     summary(b)
Main summary:

                  obs.mean    n prior.mean shrinkage low.intv post.mean
Unit w/ min(n)       0.045   67      0.029     0.914    0.019     0.030
Unit w/ median(n)    0.045  484      0.029     0.595    0.025     0.035
Unit w/ max(n)       0.020 1340      0.029     0.347    0.017     0.023
Overall Mean         0.029  517      0.029     0.609    0.019     0.028
                  upp.intv post.sd
Unit w/ min(n)       0.044   0.006
Unit w/ median(n)    0.048   0.006
Unit w/ max(n)       0.030   0.004
Overall Mean         0.039   0.005


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1          -6.568         0.606


Regression Summary:

      estimate    se   z.val p.val
beta0    -3.53 0.064 -55.225     0
> 
>     ##############################################################
>     # Poisson Regression Interactive Multilevel Modeling (PRIMM) #
>     ##############################################################
> 
>     p <- gbp(z, n, model = "pr")
>     summary(p)
Main summary:

                  obs.mean    n prior.mean shrinkage low.intv post.mean
Unit w/ min(n)       0.045   67      0.029     0.918    0.019     0.030
Unit w/ median(n)    0.045  484      0.029     0.608    0.024     0.035
Unit w/ max(n)       0.020 1340      0.029     0.359    0.017     0.023
Overall Mean         0.029  517      0.029     0.620    0.019     0.028
                  upp.intv post.sd
Unit w/ min(n)       0.044   0.006
Unit w/ median(n)    0.048   0.006
Unit w/ max(n)       0.031   0.004
Overall Mean         0.039   0.005


Second-level Variance Component Estimation Summary:
alpha = log(A) for Gaussian and log(1/r) for Binomial and Poisson data:

  post.mode.alpha post.sd.alpha
1           -6.62          0.62


Regression Summary:

      estimate    se   z.val p.val
beta0   -3.559 0.062 -57.091     0
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  11.686 0.169 11.962 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
